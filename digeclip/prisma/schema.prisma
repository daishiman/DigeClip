generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(uuid())
  email         String         @unique
  name          String?
  image         String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  appSettings   AppSettings?
  notifications Notification[]
  sources       Source[]

  @@map("users")
}

model Source {
  id            String         @id @default(uuid())
  name          String
  url           String
  type          String
  active        Boolean        @default(true)
  userId        String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  lastFetchedAt DateTime?
  arxivSource   ArxivSource?
  contents      Content[]
  rssSource     RssSource?
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  youtubeSource YoutubeSource?

  @@map("sources")
}

model YoutubeSource {
  id        String @id
  channelId String
  source    Source @relation(fields: [id], references: [id], onDelete: Cascade)

  @@map("youtube_sources")
}

model RssSource {
  id      String @id
  feedUrl String
  source  Source @relation(fields: [id], references: [id], onDelete: Cascade)

  @@map("rss_sources")
}

model ArxivSource {
  id       String  @id
  category String
  query    String?
  source   Source  @relation(fields: [id], references: [id], onDelete: Cascade)

  @@map("arxiv_sources")
}

model Content {
  id          String       @id @default(uuid())
  title       String
  description String?
  url         String
  publishedAt DateTime
  fetchedAt   DateTime     @default(now())
  sourceId    String
  contentTags ContentTag[]
  source      Source       @relation(fields: [sourceId], references: [id], onDelete: Cascade)
  summaries   Summary[]

  @@map("contents")
}

model AiModel {
  id        String    @id @default(uuid())
  name      String
  provider  String
  version   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  summaries Summary[]

  @@map("ai_models")
}

model Summary {
  id        String   @id @default(uuid())
  contentId String
  aiModelId String
  summary   String
  stage     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  aiModel   AiModel  @relation(fields: [aiModelId], references: [id], onDelete: Cascade)
  content   Content  @relation(fields: [contentId], references: [id], onDelete: Cascade)

  @@map("summaries")
}

model Notification {
  id        String   @id @default(uuid())
  userId    String
  type      String
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model Tag {
  id          String       @id @default(uuid())
  name        String       @unique
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  contentTags ContentTag[]

  @@map("tags")
}

model ContentTag {
  contentId String
  tagId     String
  createdAt DateTime @default(now())
  content   Content  @relation(fields: [contentId], references: [id], onDelete: Cascade)
  tag       Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([contentId, tagId])
  @@map("content_tags")
}

model AppSettings {
  id            String   @id @default(uuid())
  userId        String   @unique
  theme         String   @default("light")
  language      String   @default("ja")
  notifications Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("app_settings")
}
