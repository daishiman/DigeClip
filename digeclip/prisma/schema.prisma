// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ユーザーテーブル
model User {
  id             String          @id @default(uuid())
  email          String          @unique
  name           String?
  image          String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  sources        Source[]
  notifications  Notification[]
  appSettings    AppSettings?

  @@map("users")
}

// ソースの基本情報
model Source {
  id              String           @id @default(uuid())
  name            String
  url             String
  type            String           // youtube, rss, arxiv など
  active          Boolean          @default(true)
  userId          String
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  lastFetchedAt   DateTime?
  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  contents        Content[]
  youtubeSource   YoutubeSource?
  rssSource       RssSource?
  arxivSource     ArxivSource?

  @@map("sources")
}

// YouTube特有のソース情報
model YoutubeSource {
  id          String      @id
  channelId   String
  source      Source      @relation(fields: [id], references: [id], onDelete: Cascade)

  @@map("youtube_sources")
}

// RSS/ブログ特有のソース情報
model RssSource {
  id          String      @id
  feedUrl     String
  source      Source      @relation(fields: [id], references: [id], onDelete: Cascade)

  @@map("rss_sources")
}

// arXiv特有のソース情報
model ArxivSource {
  id          String      @id
  category    String
  query       String?
  source      Source      @relation(fields: [id], references: [id], onDelete: Cascade)

  @@map("arxiv_sources")
}

// コンテンツ情報
model Content {
  id            String         @id @default(uuid())
  title         String
  description   String?
  url           String
  publishedAt   DateTime
  fetchedAt     DateTime       @default(now())
  sourceId      String
  source        Source         @relation(fields: [sourceId], references: [id], onDelete: Cascade)
  summaries     Summary[]
  contentTags   ContentTag[]

  @@map("contents")
}

// AI モデル
model AiModel {
  id          String      @id @default(uuid())
  name        String
  provider    String
  version     String
  summaries   Summary[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@map("ai_models")
}

// サマリー情報
model Summary {
  id            String       @id @default(uuid())
  contentId     String
  aiModelId     String
  summary       String
  stage         String       // raw, edited, published など
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  content       Content      @relation(fields: [contentId], references: [id], onDelete: Cascade)
  aiModel       AiModel      @relation(fields: [aiModelId], references: [id], onDelete: Cascade)

  @@map("summaries")
}

// 通知情報
model Notification {
  id            String       @id @default(uuid())
  userId        String
  type          String
  message       String
  read          Boolean      @default(false)
  createdAt     DateTime     @default(now())
  user          User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

// タグ情報
model Tag {
  id            String        @id @default(uuid())
  name          String        @unique
  contentTags   ContentTag[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  @@map("tags")
}

// コンテンツとタグの中間テーブル
model ContentTag {
  contentId     String
  tagId         String
  content       Content       @relation(fields: [contentId], references: [id], onDelete: Cascade)
  tag           Tag           @relation(fields: [tagId], references: [id], onDelete: Cascade)
  createdAt     DateTime      @default(now())

  @@id([contentId, tagId])
  @@map("content_tags")
}

// アプリ設定
model AppSettings {
  id            String       @id @default(uuid())
  userId        String       @unique
  theme         String       @default("light")
  language      String       @default("ja")
  notifications Boolean      @default(true)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  user          User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("app_settings")
}