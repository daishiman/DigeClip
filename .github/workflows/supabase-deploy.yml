name: Supabase デプロイ

on:
  push:
    branches:
      - dev
      - main
    paths:
      - 'digeclip/seeds/**'
      - '.github/workflows/supabase-deploy.yml'
  workflow_dispatch:

permissions:
  contents: read

jobs:
  deploy-supabase:
    name: Supabase スキーマデプロイ
    runs-on: ubuntu-latest

    steps:
      - name: リポジトリをチェックアウト
        uses: actions/checkout@v3

      - name: PostgreSQLクライアントをインストール
        run: |
          # PostgreSQLクライアントのインストール
          sudo apt-get update
          sudo apt-get install -y postgresql-client

          # デバッグ: インストールされたpsqlのバージョンと場所を確認
          which psql || echo "psqlコマンドが見つかりません"
          psql --version || echo "psqlのバージョン取得に失敗"

          # デバッグ: PostgreSQLクライアントのバイナリディレクトリをリスト
          ls -la /usr/bin/psql || echo "/usr/bin/psql が存在しません"
          ls -la /usr/lib/postgresql/ || echo "/usr/lib/postgresql/ ディレクトリが存在しません"

          # psqlコマンドへのシンボリックリンクを作成（必要に応じて）
          if [ ! -f /usr/bin/psql ]; then
            echo "psqlコマンドが見つからないため、シンボリックリンクを作成します"
            PSQL_PATH=$(find /usr/lib/postgresql -name psql -type f | head -n 1)
            if [ -n "$PSQL_PATH" ]; then
              sudo ln -s $PSQL_PATH /usr/bin/psql
              echo "シンボリックリンクを作成しました: $PSQL_PATH -> /usr/bin/psql"
            else
              echo "psqlコマンドが見つかりません。インストールに失敗した可能性があります。"
            fi
          fi

      - name: Supabase CLI をインストール
        uses: supabase/setup-cli@v1
        with:
          version: latest

      - name: 環境変数を設定
        id: set-env
        run: |
          if [[ $GITHUB_REF == 'refs/heads/dev' ]]; then
            # GitHub Secretsから開発環境のプロジェクトIDを設定
            echo "SUPABASE_PROJECT_ID=${{ secrets.DEV_SUPABASE_PROJECT_ID }}" >> $GITHUB_ENV
            echo "SUPABASE_ACCESS_TOKEN=${{ secrets.SUPABASE_ACCESS_TOKEN }}" >> $GITHUB_ENV
            echo "APPLY_SEED=true" >> $GITHUB_ENV
            echo "環境: 開発環境 (シードデータ適用あり)" >> $GITHUB_STEP_SUMMARY
            echo "Supabase Project ID: ${{ secrets.DEV_SUPABASE_PROJECT_ID }}" >> $GITHUB_STEP_SUMMARY
          elif [[ $GITHUB_REF == 'refs/heads/main' ]]; then
            # GitHub Secretsから本番環境のプロジェクトIDを設定
            echo "SUPABASE_PROJECT_ID=${{ secrets.PROD_SUPABASE_PROJECT_ID }}" >> $GITHUB_ENV
            echo "SUPABASE_ACCESS_TOKEN=${{ secrets.SUPABASE_ACCESS_TOKEN }}" >> $GITHUB_ENV
            echo "APPLY_SEED=false" >> $GITHUB_ENV
            echo "環境: 本番環境 (スキーマのみ適用、シードデータなし)" >> $GITHUB_STEP_SUMMARY
            echo "Supabase Project ID: ${{ secrets.PROD_SUPABASE_PROJECT_ID }}" >> $GITHUB_STEP_SUMMARY
          fi

          # デバッグ: 設定された環境変数の確認（機密情報は除く）
          echo "GITHUB_REF: $GITHUB_REF"
          echo "APPLY_SEED: $APPLY_SEED"

      - name: 接続情報の検証
        run: |
          # Supabase CLIの接続テスト
          echo "Supabase CLIの接続テスト中..."
          supabase projects list --debug > cli_test.log 2>&1

          if [ $? -ne 0 ]; then
            echo "Supabase CLI接続テストに失敗しました。詳細:"
            cat cli_test.log | grep -v "password\|token\|secret\|key"
            exit 1
          else
            echo "Supabase CLI接続テスト成功"
          fi

      - name: スキーマをデプロイ
        run: |
          # スキーマファイルの存在確認
          if [[ ! -f "digeclip/seeds/dev_schema.sql" ]]; then
            echo "Error: digeclip/seeds/dev_schema.sql ファイルが見つかりません。"
            exit 1
          fi

          # デバッグ: スキーマファイルの内容確認（最初の10行）
          echo "スキーマファイルの確認（最初の10行）:"
          head -n 10 digeclip/seeds/dev_schema.sql

          # 両環境ともにスキーマを適用
          echo "Supabase CLIを使用してスキーマを適用中..."
          cat digeclip/seeds/dev_schema.sql | supabase db query --project-ref $SUPABASE_PROJECT_ID

          if [[ $GITHUB_REF == 'refs/heads/dev' ]]; then
            echo "開発環境用スキーマを適用しました" >> $GITHUB_STEP_SUMMARY
          elif [[ $GITHUB_REF == 'refs/heads/main' ]]; then
            echo "本番環境用スキーマを適用しました" >> $GITHUB_STEP_SUMMARY
          fi

      - name: 開発環境にシードデータを適用
        if: env.APPLY_SEED == 'true'
        run: |
          # シードファイルの存在確認
          if [[ ! -f "digeclip/seeds/dev_seed.sql" ]]; then
            echo "Error: digeclip/seeds/dev_seed.sql ファイルが見つかりません。"
            exit 1
          fi

          # デバッグ: シードファイルの内容確認（最初の10行）
          echo "シードファイルの確認（最初の10行）:"
          head -n 10 digeclip/seeds/dev_seed.sql

          echo "開発環境用シードデータを適用します"
          cat digeclip/seeds/dev_seed.sql | supabase db query --project-ref $SUPABASE_PROJECT_ID
          echo "開発環境用シードデータを適用しました" >> $GITHUB_STEP_SUMMARY

      - name: デプロイ結果の確認
        run: |
          echo "デプロイ処理が完了しました"
          echo "日時: $(date)"
          echo "GitHub Action 実行URL: $GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID"