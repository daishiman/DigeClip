name: Supabase デプロイ

on:
  push:
    branches:
      - dev
      - main
    paths:
      - 'digeclip/seeds/**'
      - '.github/workflows/supabase-deploy.yml'
  workflow_dispatch:

permissions:
  contents: read

jobs:
  deploy-supabase:
    name: Supabase スキーマデプロイ
    runs-on: ubuntu-latest

    steps:
      - name: リポジトリをチェックアウト
        uses: actions/checkout@v3

      - name: PostgreSQLクライアントをインストール
        run: |
          # PostgreSQLクライアントのインストール
          echo "::group::パッケージリストの更新"
          sudo apt-get update
          echo "::endgroup::"

          echo "::group::必要なパッケージのインストール"
          # netcatは仮想パッケージなので具体的な実装を指定 (Ubuntu 24.04対応)
          sudo apt-get install -y postgresql-client dnsutils iputils-ping netcat-openbsd
          echo "::endgroup::"

          # デバッグ: インストールされたpsqlのバージョンと場所を確認
          which psql || echo "psqlコマンドが見つかりません"
          psql --version || echo "psqlのバージョン取得に失敗"

          # Ubuntu 24.04対応の確認
          echo "::group::システム情報"
          lsb_release -a || echo "lsb_releaseコマンドが利用できません"
          echo "::endgroup::"

      - name: Supabase CLI をインストール
        uses: supabase/setup-cli@v1
        with:
          version: latest

      - name: Supabase CLIバージョンを確認
        run: |
          # Supabase CLIのバージョン確認
          supabase --version
          # 利用可能なコマンドの確認
          supabase -h

      - name: 環境変数を設定
        id: set-env
        run: |
          if [[ $GITHUB_REF == 'refs/heads/dev' ]]; then
            # GitHub Secretsから開発環境の設定を使用
            echo "SUPABASE_PROJECT_ID=${{ secrets.DEV_SUPABASE_PROJECT_ID }}" >> $GITHUB_ENV
            echo "SUPABASE_ACCESS_TOKEN=${{ secrets.SUPABASE_ACCESS_TOKEN }}" >> $GITHUB_ENV
            echo "SUPABASE_DB_PASSWORD=${{ secrets.DEV_DB_PASSWORD }}" >> $GITHUB_ENV
            echo "SUPABASE_DB_HOST=db.${{ secrets.DEV_SUPABASE_PROJECT_ID }}.supabase.co" >> $GITHUB_ENV
            echo "SUPABASE_DB_USER=postgres" >> $GITHUB_ENV
            echo "APPLY_SEED=true" >> $GITHUB_ENV
            echo "環境: 開発環境 (シードデータ適用あり)" >> $GITHUB_STEP_SUMMARY
            echo "Supabase Project ID: ${{ secrets.DEV_SUPABASE_PROJECT_ID }}" >> $GITHUB_STEP_SUMMARY
          elif [[ $GITHUB_REF == 'refs/heads/main' ]]; then
            # GitHub Secretsから本番環境の設定を使用
            echo "SUPABASE_PROJECT_ID=${{ secrets.PROD_SUPABASE_PROJECT_ID }}" >> $GITHUB_ENV
            echo "SUPABASE_ACCESS_TOKEN=${{ secrets.SUPABASE_ACCESS_TOKEN }}" >> $GITHUB_ENV
            echo "SUPABASE_DB_PASSWORD=${{ secrets.PROD_DB_PASSWORD }}" >> $GITHUB_ENV
            echo "SUPABASE_DB_HOST=db.${{ secrets.PROD_SUPABASE_PROJECT_ID }}.supabase.co" >> $GITHUB_ENV
            echo "SUPABASE_DB_USER=postgres" >> $GITHUB_ENV
            echo "APPLY_SEED=false" >> $GITHUB_ENV
            echo "環境: 本番環境 (スキーマのみ適用、シードデータなし)" >> $GITHUB_STEP_SUMMARY
            echo "Supabase Project ID: ${{ secrets.PROD_SUPABASE_PROJECT_ID }}" >> $GITHUB_STEP_SUMMARY
          fi

          # デバッグ: 設定された環境変数の確認（機密情報は除く）
          echo "GITHUB_REF: $GITHUB_REF"
          echo "APPLY_SEED: $APPLY_SEED"
          echo "SUPABASE_DB_HOST: $SUPABASE_DB_HOST"
          echo "SUPABASE_DB_USER: $SUPABASE_DB_USER"

      - name: DNS解決のテスト
        run: |
          # デバッグ情報追加: 環境変数の確認
          echo "::group::接続情報の確認"
          echo "接続先: $SUPABASE_DB_HOST"
          echo "ユーザー: $SUPABASE_DB_USER"
          echo "::endgroup::"

          echo "::group::DNSテスト"
          # ホスト名のDNS解決をテスト
          echo "DNSテスト: nslookup"
          nslookup $SUPABASE_DB_HOST || echo "nslookup失敗: $?"

          echo "DNSテスト: dig"
          dig $SUPABASE_DB_HOST +short || echo "dig失敗: $?"

          echo "DNSテスト: dig A レコード"
          dig A $SUPABASE_DB_HOST +short || echo "dig A失敗: $?"

          echo "DNSテスト: dig AAAA レコード"
          dig AAAA $SUPABASE_DB_HOST +short || echo "dig AAAA失敗: $?"
          echo "::endgroup::"

          echo "::group::ネットワーク接続性テスト"
          # ネットワーク接続性テスト (IPv4優先)
          echo "接続テスト: ping (IPv4)"
          ping -c 3 -4 $SUPABASE_DB_HOST || echo "ping失敗: $?"

          # nc (netcat) を使った接続テスト
          echo "接続テスト: nc (IPv4)"
          nc -vz -4 $SUPABASE_DB_HOST 5432 || echo "nc接続テスト失敗: $?"

          # 代替手段: telnet風の接続テスト
          echo "接続テスト: /dev/tcp (bash機能)"
          timeout 5 bash -c "</dev/tcp/$SUPABASE_DB_HOST/5432" 2>/dev/null && echo "TCP接続成功" || echo "TCP接続失敗: $?"
          echo "::endgroup::"

      - name: 接続情報の検証
        run: |
          echo "::group::Supabase CLI接続テスト"
          # Supabase CLIの接続テスト
          echo "Supabase CLIの接続テスト中..."
          # ドキュメント通りに必要な環境変数が設定されているか確認
          echo "必要な環境変数: SUPABASE_ACCESS_TOKEN, SUPABASE_PROJECT_ID, SUPABASE_DB_PASSWORD"

          # 環境変数の存在確認（値は表示しない）
          for var in SUPABASE_ACCESS_TOKEN SUPABASE_PROJECT_ID SUPABASE_DB_PASSWORD; do
            if [ -z "${!var}" ]; then
              echo "警告: $var が設定されていません"
            else
              echo "$var: 設定済み"
            fi
          done

          # プロジェクト一覧を取得して接続テスト
          supabase projects list --debug > cli_test.log 2>&1
          CLI_TEST_RESULT=$?

          if [ $CLI_TEST_RESULT -ne 0 ]; then
            echo "Supabase CLI接続テストに失敗しました。終了コード: $CLI_TEST_RESULT"
            echo "詳細 (機密情報除く):"
            cat cli_test.log | grep -v "password\|token\|secret\|key"
            # 失敗してもプロセスを続行
            echo "警告: Supabase CLI接続テストに失敗しましたが、続行します"
          else
            echo "Supabase CLI接続テスト成功"
          fi
          echo "::endgroup::"

      - name: デプロイ前のスキーマ確認
        run: |
          echo "::group::スキーマファイルの検証"
          # スキーマファイルの存在確認
          if [[ ! -f "digeclip/seeds/dev_schema.sql" ]]; then
            echo "Error: digeclip/seeds/dev_schema.sql ファイルが見つかりません。"
            exit 1
          fi

          # デバッグ: スキーマファイルの内容確認（最初の10行）
          echo "スキーマファイルの確認（最初の10行）:"
          head -n 10 digeclip/seeds/dev_schema.sql

          # ファイルサイズとSQLコマンド数の確認
          echo "ファイルサイズ: $(wc -c < digeclip/seeds/dev_schema.sql) バイト"
          echo "CREATE文の数: $(grep -c "CREATE" digeclip/seeds/dev_schema.sql)"
          echo "INSERT文の数: $(grep -c "INSERT" digeclip/seeds/dev_schema.sql)"
          echo "::endgroup::"

      - name: psql接続テスト（各種オプション）
        run: |
          echo "::group::psql接続テスト"
          # IPv4アドレス解決の確認
          echo "DB接続先のIPv4アドレスを確認:"
          IP_ADDR=$(dig +short A $SUPABASE_DB_HOST | head -n1)
          if [ -n "$IP_ADDR" ]; then
            echo "IPアドレス: $IP_ADDR が見つかりました"
          else
            echo "IPアドレスの解決に失敗しました"
          fi

          # psqlでの接続テスト（IPv4強制）
          echo "psqlの接続テスト (IPv4強制)..."
          PGPASSWORD=$SUPABASE_DB_PASSWORD psql -4 -h $SUPABASE_DB_HOST -U $SUPABASE_DB_USER -p 5432 -d postgres -c "SELECT current_database(), current_user" || PSQL_RESULT=$?

          if [ -n "$PSQL_RESULT" ]; then
            echo "psql接続テストに失敗しました (終了コード: $PSQL_RESULT)"

            # 代替接続方法: ホスト名の代わりにIPアドレスを使用
            if [ -n "$IP_ADDR" ]; then
              echo "IPアドレスを直接使用して接続テスト:"
              PGPASSWORD=$SUPABASE_DB_PASSWORD psql -h $IP_ADDR -U $SUPABASE_DB_USER -p 5432 -d postgres -c "SELECT current_database()" || echo "IPアドレスでの接続にも失敗しました"
            fi

            # Supabase接続文字列の形式を使用
            echo "Supabase接続文字列の形式を使用:"
            PGPASSWORD=$SUPABASE_DB_PASSWORD psql "postgresql://$SUPABASE_DB_USER:placeholder@$SUPABASE_DB_HOST:5432/postgres" -c "SELECT current_database()" || echo "接続文字列形式での接続にも失敗しました"
          else
            echo "psql接続テスト成功"
          fi
          echo "::endgroup::"

      - name: スキーマをデプロイ
        continue-on-error: true  # エラーが発生しても次のステップに進む
        run: |
          echo "::group::スキーマデプロイ"
          # スキーマを適用（IPv4強制）
          echo "psqlを使用してスキーマを適用しています (IPv4強制)..."
          PGPASSWORD=$SUPABASE_DB_PASSWORD psql -4 -h $SUPABASE_DB_HOST -U $SUPABASE_DB_USER -p 5432 -d postgres -f digeclip/seeds/dev_schema.sql

          DEPLOY_RESULT=$?
          if [ $DEPLOY_RESULT -eq 0 ]; then
            if [[ $GITHUB_REF == 'refs/heads/dev' ]]; then
              echo "開発環境用スキーマを適用しました" >> $GITHUB_STEP_SUMMARY
            elif [[ $GITHUB_REF == 'refs/heads/main' ]]; then
              echo "本番環境用スキーマを適用しました" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "スキーマ適用中にエラーが発生しました。終了コード: $DEPLOY_RESULT" >> $GITHUB_STEP_SUMMARY
            echo "スキーマ適用中にエラーが発生しました。終了コード: $DEPLOY_RESULT"

            # IPアドレスを使った代替方法
            IP_ADDR=$(dig +short A $SUPABASE_DB_HOST | head -n1)
            if [ -n "$IP_ADDR" ]; then
              echo "IPアドレスを使用した代替方法を試みます..."
              PGPASSWORD=$SUPABASE_DB_PASSWORD psql -h $IP_ADDR -U $SUPABASE_DB_USER -p 5432 -d postgres -f digeclip/seeds/dev_schema.sql
              if [ $? -eq 0 ]; then
                echo "IPアドレスを使用したスキーマ適用に成功しました" >> $GITHUB_STEP_SUMMARY
              else
                echo "IPアドレスを使用したスキーマ適用にも失敗しました" >> $GITHUB_STEP_SUMMARY
              fi
            fi

            # Supabase CLIを使用した代替方法を試す
            echo "Supabase CLIを使用した代替方法を試みます..."
            supabase db push --db-url "postgresql://$SUPABASE_DB_USER:$SUPABASE_DB_PASSWORD@$SUPABASE_DB_HOST:5432/postgres" digeclip/seeds/dev_schema.sql
            if [ $? -eq 0 ]; then
              echo "Supabase CLI db pushでのスキーマ適用に成功しました" >> $GITHUB_STEP_SUMMARY
            else
              echo "Supabase CLI db pushにも失敗しました" >> $GITHUB_STEP_SUMMARY
            fi
          fi
          echo "::endgroup::"

      - name: 開発環境にシードデータを適用
        if: env.APPLY_SEED == 'true'
        continue-on-error: true  # エラーが発生しても次のステップに進む
        run: |
          echo "::group::シードデータ適用"
          # シードファイルの存在確認
          if [[ ! -f "digeclip/seeds/dev_seed.sql" ]]; then
            echo "Error: digeclip/seeds/dev_seed.sql ファイルが見つかりません。"
            exit 1
          fi

          # デバッグ: シードファイルの内容確認（最初の10行）
          echo "シードファイルの確認（最初の10行）:"
          head -n 10 digeclip/seeds/dev_seed.sql

          # シードファイルの統計
          echo "ファイルサイズ: $(wc -c < digeclip/seeds/dev_seed.sql) バイト"
          echo "INSERT文の数: $(grep -c "INSERT" digeclip/seeds/dev_seed.sql)"

          echo "開発環境用シードデータを適用します (IPv4強制)"
          # psqlを使用してシードデータを適用（IPv4強制）
          PGPASSWORD=$SUPABASE_DB_PASSWORD psql -4 -h $SUPABASE_DB_HOST -U $SUPABASE_DB_USER -p 5432 -d postgres -f digeclip/seeds/dev_seed.sql

          SEED_RESULT=$?
          if [ $SEED_RESULT -eq 0 ]; then
            echo "開発環境用シードデータを適用しました" >> $GITHUB_STEP_SUMMARY
          else
            echo "シードデータ適用中にエラーが発生しました。終了コード: $SEED_RESULT" >> $GITHUB_STEP_SUMMARY
            echo "シードデータ適用中にエラーが発生しました。終了コード: $SEED_RESULT"

            # IPアドレスを使った代替方法
            IP_ADDR=$(dig +short A $SUPABASE_DB_HOST | head -n1)
            if [ -n "$IP_ADDR" ]; then
              echo "IPアドレスを使用した代替方法を試みます..."
              PGPASSWORD=$SUPABASE_DB_PASSWORD psql -h $IP_ADDR -U $SUPABASE_DB_USER -p 5432 -d postgres -f digeclip/seeds/dev_seed.sql
              if [ $? -eq 0 ]; then
                echo "IPアドレスを使用したシードデータ適用に成功しました" >> $GITHUB_STEP_SUMMARY
              else
                echo "IPアドレスを使用したシードデータ適用にも失敗しました" >> $GITHUB_STEP_SUMMARY
              fi
            fi
          fi
          echo "::endgroup::"

      - name: 代替接続方法の試行
        run: |
          echo "::group::代替接続方法"
          echo "代替接続方法のテスト中..."

          # Supabaseのドキュメントに基づく接続方法
          echo "Supabaseドキュメントに基づく接続情報:"
          echo "接続方法: postgresql://<username>:<password>@<host>:<port>/<database>"
          echo "使用する値: postgresql://$SUPABASE_DB_USER:***@$SUPABASE_DB_HOST:5432/postgres"

          echo "Supabase CLIを使用したデータベース情報の取得："
          supabase db info || echo "db info取得に失敗しました: $?"

          # 環境変数の一部隠蔽
          DB_HOST_DOMAIN=$(echo $SUPABASE_DB_HOST | cut -d'.' -f2-)
          echo "接続先ドメイン: $DB_HOST_DOMAIN"

          # Supabaseの最新APIを使用したプロジェクト情報の取得
          echo "Supabase APIを使用したプロジェクト情報の取得:"
          if [ -n "$SUPABASE_ACCESS_TOKEN" ] && [ -n "$SUPABASE_PROJECT_ID" ]; then
            curl -s -H "Authorization: Bearer $SUPABASE_ACCESS_TOKEN" \
              "https://api.supabase.com/v1/projects/$SUPABASE_PROJECT_ID" | \
              grep -v "sensitive\|password\|secret\|key" || echo "API呼び出しに失敗しました: $?"
          else
            echo "Supabase APIの認証情報が不足しています"
          fi

          # SSL設定オプションを試す
          echo "SSL設定オプションを変更して接続テスト:"
          PGPASSWORD=$SUPABASE_DB_PASSWORD psql "postgresql://$SUPABASE_DB_USER@$SUPABASE_DB_HOST:5432/postgres?sslmode=require" \
            -c "SELECT current_database()" || echo "SSL require モードでの接続に失敗しました: $?"

          # デバッグ用にIPv4アドレスを直接使用する可能性のテスト
          echo "nslookupでIPv4アドレスを取得します："
          IP_ADDR=$(dig +short A $SUPABASE_DB_HOST | head -n1)
          if [ -n "$IP_ADDR" ]; then
            echo "IPアドレス: $IP_ADDR が見つかりました"
            echo "IPアドレスを直接使用して接続テスト："
            PGPASSWORD=$SUPABASE_DB_PASSWORD psql -h $IP_ADDR -U $SUPABASE_DB_USER -p 5432 -d postgres -c "SELECT current_database()" || \
              echo "IPアドレスでの接続に失敗しました: $?"
          else
            echo "IPアドレスの解決に失敗しました"
          fi
          echo "::endgroup::"

      - name: デプロイ結果の確認
        run: |
          echo "::group::デプロイ結果"
          echo "デプロイ処理が完了しました"
          echo "日時: $(date)"
          echo "環境: $([[ $GITHUB_REF == 'refs/heads/dev' ]] && echo '開発環境' || echo '本番環境')"
          echo "ブランチ: $GITHUB_REF"
          echo "GitHub Action 実行URL: $GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID"

          # PostgreSQL特定クエリを実行してデプロイ結果を検証
          echo "データベース内のテーブル一覧を取得して検証:"
          PGPASSWORD=$SUPABASE_DB_PASSWORD psql -h $SUPABASE_DB_HOST -U $SUPABASE_DB_USER -p 5432 -d postgres \
            -c "\dt" || echo "テーブル一覧の取得に失敗しました: $?"

          # スキーマやシードデータが適用されたかの簡易確認
          echo "実行結果の要約を確認してください。"

          # GitHubステップサマリーに追加情報を記録
          cat << EOF >> $GITHUB_STEP_SUMMARY
          ## デプロイ詳細情報
          - 実行日時: $(date)
          - 環境: $([[ $GITHUB_REF == 'refs/heads/dev' ]] && echo '開発環境' || echo '本番環境')
          - ブランチ: $GITHUB_REF
          - Ubuntu バージョン: $(lsb_release -ds || echo "不明")
          - psql バージョン: $(psql --version || echo "不明")
          - Supabase CLI バージョン: $(supabase --version || echo "不明")
          EOF
          echo "::endgroup::"