name: Supabase デプロイ

on:
  push:
    branches:
      - dev
      - main
    paths:
      - 'digeclip/seeds/**'
      - '.github/workflows/supabase-deploy.yml'
  workflow_dispatch:

permissions:
  contents: read

jobs:
  deploy-supabase:
    name: Supabase スキーマデプロイ
    runs-on: ubuntu-latest

    steps:
      - name: リポジトリをチェックアウト
        uses: actions/checkout@v3

      - name: Supabase CLI をインストール
        uses: supabase/setup-cli@v1
        with:
          version: latest

      - name: 環境変数を設定
        id: set-env
        run: |
          if [[ $GITHUB_REF == 'refs/heads/dev' ]]; then
            # GitHub Secretsが設定されている場合はそれを使用
            if [[ -n "${{ secrets.DEV_SUPABASE_PROJECT_ID }}" ]]; then
              echo "SUPABASE_PROJECT_ID=${{ secrets.DEV_SUPABASE_PROJECT_ID }}" >> $GITHUB_ENV
            else
              # 環境変数ファイルの存在確認
              if [[ ! -f "digeclip/.env.development" ]]; then
                echo "Error: digeclip/.env.development ファイルが見つかりません。"
                exit 1
              fi
              # 環境変数ファイルからプロジェクトIDを抽出
              DEV_SUPABASE_URL=$(grep NEXT_PUBLIC_SUPABASE_URL digeclip/.env.development | cut -d'"' -f2)
              DEV_PROJECT_ID=$(echo $DEV_SUPABASE_URL | sed 's/https:\/\///' | sed 's/.supabase.co//')
              echo "SUPABASE_PROJECT_ID=$DEV_PROJECT_ID" >> $GITHUB_ENV
            fi

            echo "SUPABASE_ACCESS_TOKEN=${{ secrets.SUPABASE_ACCESS_TOKEN }}" >> $GITHUB_ENV
            echo "APPLY_SEED=true" >> $GITHUB_ENV
            echo "環境: 開発環境 (シードデータ適用あり)" >> $GITHUB_STEP_SUMMARY
            # ファイルが存在する場合のみURLを表示
            if [[ -f "digeclip/.env.development" ]]; then
              echo "Supabase URL: $(grep NEXT_PUBLIC_SUPABASE_URL digeclip/.env.development | cut -d'"' -f2)" >> $GITHUB_STEP_SUMMARY
            else
              echo "Supabase URL: 環境変数から取得 (${{ secrets.DEV_SUPABASE_PROJECT_ID }})" >> $GITHUB_STEP_SUMMARY
            fi
          elif [[ $GITHUB_REF == 'refs/heads/main' ]]; then
            # GitHub Secretsが設定されている場合はそれを使用
            if [[ -n "${{ secrets.PROD_SUPABASE_PROJECT_ID }}" ]]; then
              echo "SUPABASE_PROJECT_ID=${{ secrets.PROD_SUPABASE_PROJECT_ID }}" >> $GITHUB_ENV
            else
              # 環境変数ファイルの存在確認
              if [[ ! -f "digeclip/.env.production" ]]; then
                echo "Error: digeclip/.env.production ファイルが見つかりません。"
                exit 1
              fi
              # 環境変数ファイルからプロジェクトIDを抽出
              PROD_SUPABASE_URL=$(grep NEXT_PUBLIC_SUPABASE_URL digeclip/.env.production | cut -d'"' -f2)
              PROD_PROJECT_ID=$(echo $PROD_SUPABASE_URL | sed 's/https:\/\///' | sed 's/.supabase.co//')
              echo "SUPABASE_PROJECT_ID=$PROD_PROJECT_ID" >> $GITHUB_ENV
            fi

            echo "SUPABASE_ACCESS_TOKEN=${{ secrets.SUPABASE_ACCESS_TOKEN }}" >> $GITHUB_ENV
            echo "APPLY_SEED=false" >> $GITHUB_ENV
            echo "環境: 本番環境 (スキーマのみ適用、シードデータなし)" >> $GITHUB_STEP_SUMMARY
            # ファイルが存在する場合のみURLを表示
            if [[ -f "digeclip/.env.production" ]]; then
              echo "Supabase URL: $(grep NEXT_PUBLIC_SUPABASE_URL digeclip/.env.production | cut -d'"' -f2)" >> $GITHUB_STEP_SUMMARY
            else
              echo "Supabase URL: 環境変数から取得 (${{ secrets.PROD_SUPABASE_PROJECT_ID }})" >> $GITHUB_STEP_SUMMARY
            fi
          fi

      - name: スキーマをデプロイ
        run: |
          # スキーマファイルの存在確認
          if [[ ! -f "digeclip/seeds/dev_schema.sql" ]]; then
            echo "Error: digeclip/seeds/dev_schema.sql ファイルが見つかりません。"
            exit 1
          fi

          # 両環境ともにスキーマを適用
          cat digeclip/seeds/dev_schema.sql | supabase db query --project-ref $SUPABASE_PROJECT_ID

          if [[ $GITHUB_REF == 'refs/heads/dev' ]]; then
            echo "開発環境用スキーマを適用しました" >> $GITHUB_STEP_SUMMARY
          elif [[ $GITHUB_REF == 'refs/heads/main' ]]; then
            echo "本番環境用スキーマを適用しました" >> $GITHUB_STEP_SUMMARY
          fi

      - name: 開発環境にシードデータを適用
        if: env.APPLY_SEED == 'true'
        run: |
          # シードファイルの存在確認
          if [[ ! -f "digeclip/seeds/dev_seed.sql" ]]; then
            echo "Error: digeclip/seeds/dev_seed.sql ファイルが見つかりません。"
            exit 1
          fi

          echo "開発環境用シードデータを適用します"
          cat digeclip/seeds/dev_seed.sql | supabase db query --project-ref $SUPABASE_PROJECT_ID
          echo "開発環境用シードデータを適用しました" >> $GITHUB_STEP_SUMMARY