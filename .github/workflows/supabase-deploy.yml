name: Supabase デプロイ

on:
  push:
    branches:
      - dev
      - main
    paths:
      - 'digeclip/seeds/**'
      - '.github/workflows/supabase-deploy.yml'
  workflow_dispatch:

permissions:
  contents: read

jobs:
  deploy-supabase:
    name: Supabase スキーマデプロイ
    runs-on: ubuntu-latest

    steps:
      - name: リポジトリをチェックアウト
        uses: actions/checkout@v3

      - name: Supabase CLI をインストール
        uses: supabase/setup-cli@v1
        with:
          version: latest

      - name: PostgreSQLクライアントをインストール
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client

      - name: 環境変数を設定
        id: set-env
        run: |
          if [[ $GITHUB_REF == 'refs/heads/dev' ]]; then
            # GitHub Secretsから開発環境のプロジェクトIDを設定
            echo "SUPABASE_PROJECT_ID=${{ secrets.DEV_SUPABASE_PROJECT_ID }}" >> $GITHUB_ENV
            echo "SUPABASE_ACCESS_TOKEN=${{ secrets.SUPABASE_ACCESS_TOKEN }}" >> $GITHUB_ENV
            echo "DB_USER=${{ secrets.DEV_DB_USER }}" >> $GITHUB_ENV
            echo "DB_PASSWORD=${{ secrets.DEV_DB_PASSWORD }}" >> $GITHUB_ENV
            echo "APPLY_SEED=true" >> $GITHUB_ENV
            echo "環境: 開発環境 (シードデータ適用あり)" >> $GITHUB_STEP_SUMMARY
            echo "Supabase Project ID: ${{ secrets.DEV_SUPABASE_PROJECT_ID }}" >> $GITHUB_STEP_SUMMARY
          elif [[ $GITHUB_REF == 'refs/heads/main' ]]; then
            # GitHub Secretsから本番環境のプロジェクトIDを設定
            echo "SUPABASE_PROJECT_ID=${{ secrets.PROD_SUPABASE_PROJECT_ID }}" >> $GITHUB_ENV
            echo "SUPABASE_ACCESS_TOKEN=${{ secrets.SUPABASE_ACCESS_TOKEN }}" >> $GITHUB_ENV
            echo "DB_USER=${{ secrets.PROD_DB_USER }}" >> $GITHUB_ENV
            echo "DB_PASSWORD=${{ secrets.PROD_DB_PASSWORD }}" >> $GITHUB_ENV
            echo "APPLY_SEED=false" >> $GITHUB_ENV
            echo "環境: 本番環境 (スキーマのみ適用、シードデータなし)" >> $GITHUB_STEP_SUMMARY
            echo "Supabase Project ID: ${{ secrets.PROD_SUPABASE_PROJECT_ID }}" >> $GITHUB_STEP_SUMMARY
          fi

      - name: スキーマをデプロイ
        run: |
          # スキーマファイルの存在確認
          if [[ ! -f "digeclip/seeds/dev_schema.sql" ]]; then
            echo "Error: digeclip/seeds/dev_schema.sql ファイルが見つかりません。"
            exit 1
          fi

          # 両環境ともにスキーマを適用
          CONNECTION_STRING="postgresql://${DB_USER}:${DB_PASSWORD}@db.${SUPABASE_PROJECT_ID}.supabase.co:5432/postgres"
          # ここでpsqlコマンドを使用してSQLファイルを実行
          PGPASSWORD="${DB_PASSWORD}" psql "sslmode=require hostname-type=ip4 host=db.${SUPABASE_PROJECT_ID}.supabase.co port=5432 user=${DB_USER} dbname=postgres" -f digeclip/seeds/dev_schema.sql

          if [[ $GITHUB_REF == 'refs/heads/dev' ]]; then
            echo "開発環境用スキーマを適用しました" >> $GITHUB_STEP_SUMMARY
          elif [[ $GITHUB_REF == 'refs/heads/main' ]]; then
            echo "本番環境用スキーマを適用しました" >> $GITHUB_STEP_SUMMARY
          fi

      - name: 開発環境にシードデータを適用
        if: env.APPLY_SEED == 'true'
        run: |
          # シードファイルの存在確認
          if [[ ! -f "digeclip/seeds/dev_seed.sql" ]]; then
            echo "Error: digeclip/seeds/dev_seed.sql ファイルが見つかりません。"
            exit 1
          fi

          echo "開発環境用シードデータを適用します"
          # ここでpsqlコマンドを使用してシードSQLファイルを実行
          PGPASSWORD="${DB_PASSWORD}" psql "sslmode=require hostname-type=ip4 host=db.${SUPABASE_PROJECT_ID}.supabase.co port=5432 user=${DB_USER} dbname=postgres" -f digeclip/seeds/dev_seed.sql
          echo "開発環境用シードデータを適用しました" >> $GITHUB_STEP_SUMMARY