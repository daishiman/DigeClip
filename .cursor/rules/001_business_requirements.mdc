---
description: ビジネス要件の定義
globs: ["**/*.{tsx,jsx,ts,js}"]
alwaysApply: false
---
# ビジネス要件

## 1_business_requirements/1_Business_Goal_and_Objectives.md

# ビジネスゴール・目的の明確化

## 1. 概要
- **プロジェクト名**: [YouTubeおよび外部コンテンツ情報収集・要約システム（仮）]
- **作成者**: []
- **更新日**: []

---

## 2. 解決したい課題・背景

- **現状の課題**:
  - 複数のYouTubeチャンネルや論文・ブログなど、情報源が多岐にわたり、新しいコンテンツを見つけるまでに手間がかかる
  - 動画や記事が長文であるため、内容を把握するまでに時間がかかり過ぎる
  - それぞれの情報源にアクセスして個別にチェックするため、見落としや重複確認の手間が発生
  - チーム内で共有する際、要点をまとめる作業がメンバーによってバラバラで品質にムラがある

- **その課題が発生している原因**:
  - 1箇所で情報を一元管理・要約できる仕組みがない
  - 長文・長時間コンテンツの重要部分を効率よく抽出する方法が確立されていない
  - 各人が「手動で情報収集＋内容確認」を行うため作業が属人的になっている
  - AIモデルを活用した要約は便利だが、一から導入・設定を行うハードルが高い

- **現在の対応策**:
  - 手動でRSSやチャンネルを巡回し、新着を確認している
  - メンバー各自がまとめノートを作成し、別途Discordやチャットツールに共有している
  - AIモデルを使用して要約しているが、利用者によって使うサービスや料金がバラバラで統一されていない

- **改善しない場合のリスク**:
  - 大量の情報を追うための時間コストが増大し、他の業務に支障が出る
  - 重要な発表や新情報を見落とすリスクが高まる
  - 情報をうまく要約できないことで、チーム全体の意思決定や学習効率が低下する
  - AIを活用できず手動作業が増え、結果的に費用（人的コスト）がかさむ

---

## 3. ビジネスゴール・目的

- **最終的に実現したいこと**:
  - YouTubeチャンネルや外部サイトから新着情報を自動収集し、要約してDiscord等に通知することで、チームや個人の「情報収集にかかる時間」を大幅に削減する
  - 経験の浅いエンジニアでも簡単に導入・運用できるシステムを提供し、追加コストや複雑な設定を最小化する
  - AIモデルによる要約の品質を確保しつつ、**無料または安価なサービス**を前提に運用できるようにする

- **達成指標(KPI)と目標値**:
  - **情報収集時間の削減率**: 従来の手動チェック時間を100とした場合、**50%以上**の削減を目指す
  - **導入コスト**: できるだけ無料プラン（Vercel無料枠・OpenAI無料クレジットなど）で運用を開始できる構成とし、**初期導入費用0円**を目標とする
  - **エンジニアの学習ハードル**: ドキュメントやテンプレートを整備し、**1週間以内**に基礎部分の実装～リリースができるレベルを目指す
  - **情報見落とし率**: 主要なYouTubeチャンネル・論文フィードに関して、90%以上の新着を検知できるようにする

---

## 4. 成果物・プロジェクト成功条件

- **成果物 (Deliverables)**:
  1. **Next.jsベースのウェブアプリケーション**
     - Vercel上で動作し、管理画面から監視対象やAIモデル設定ができる
  2. **Postgres等のデータベース構成とスクリプト**
     - 新着コンテンツや要約結果を保存できる最低限のテーブル設計
  3. **要約処理に必要なAIモデル連携部分のソースコード**
     - 設定ファイルや.envを切り替えるだけで動作可能
  4. **Discord Webhookへの通知機能**
     - 新着情報＋要約を自動で投稿できる最低限の機能
  5. **運用マニュアル・導入手順書**
     - 経験の浅いエンジニアでも手順通りに行えば1週間以内に立ち上げられるようにする
  6. **拡張用の設計方針**
     - 将来的に他のAIモデルや通知先を追加しやすいコード構成

- **プロジェクトが成功したとみなすための基準**:
  1. **低コスト**:
     - Vercelの無料枠＋OpenAIなどの無料クレジットまたは安価なプランで十分稼働させられる
     - 追加で高額なインフラ費や外部サービス契約が不要
  2. **容易な導入**:
     - 専門的なサーバ構築や複雑なCI/CD設定なしに、GitHub連携＆Vercelデプロイのみで稼働
  3. **要約結果の有用性**:
     - Discord通知で配信される要約を読めば、**重要ポイントがすぐ分かる**レベルの品質
  4. **情報収集時間の削減**:
     - 現行運用と比較し、**手動チェックの時間が50%以上**削減できる
  5. **メンテナンス性**:
     - 経験の浅いエンジニアが、次のフェーズでの新機能（例: 別のAPI連携、UI改善など）を追加しやすい
  6. **拡張性**:
     - 必要に応じて他AIモデルを追加できる設計（例: ClaudeやGemini等のAPI連携）

---

## 5. 関連ドキュメント・参照先

- **既存の仕様詳細**:
  - [YouTubeおよび外部コンテンツ情報収集・要約システム 要件定義書]
  - [該当GitHubリポジトリURL]
- **技術スタック**:
  - [Next.js公式ドキュメント](https://nextjs.org/docs)
  - [Vercelのドキュメント](https://vercel.com/docs)
  - [OpenAI APIドキュメント](https://platform.openai.com/docs/introduction)
  - [Discord Webhookの公式説明](https://support.discord.com/hc/ja/articles/228383668)
- **開発ガイドライン・運用マニュアル**:
  - [プロジェクトのWikiまたはNotion等の連携先URL]
- **問い合わせ先**:
  - [プロジェクト担当PM/POの連絡先]



## 1_business_requirements/2_User_Definition.md

# 対象ユーザの定義

> **前提**:
> - 「YouTubeおよび外部コンテンツ情報収集・要約システム」は、**低コストで、経験の浅いエンジニアでも短期間で導入・運用できる**よう設計されています。
> - 以下のペルソナやロールはあくまで一例で、必要に応じて変更・追加を行い、運用に合わせて調整してください。

---

## 1. ユーザーペルソナ

### **ペルソナ1:**
- **名前**: 山田 花子
- **年齢**: 27 歳
- **職業/役職**: 新興IT企業のリサーチャー
- **技術レベル**: フロントエンドの基礎を理解しているが、サーバ構築やDevOpsの経験は浅い
- **利用環境**: PC（Windows）＋スマホ（iOS）
- **目標 (ゴール)**:
  - 最新の技術系YouTubeチャンネルや論文の要点を短時間でつかみ、チームへ素早く共有したい
- **抱えている課題**:
  - 毎日大量に更新される動画・ブログを手動でチェックするのが大変
  - 長い動画や論文を全部読む時間がない
  - リサーチ結果をまとめるのに時間がかかり、メイン業務が圧迫される
- **本システムに期待する価値**:
  - 自動収集＆AI要約により作業時間を半分以下にしたい
  - 要約＋サムネがDiscord通知されれば、チーム全員が一目で内容を把握できる
  - Vercel無料枠＆簡単な設定だけで動かせるなら、自分でも導入できる

---

### **ペルソナ2:**
- **名前**: 鈴木 太郎
- **年齢**: 34 歳
- **職業/役職**: 大学研究室の博士課程学生
- **技術レベル**: Pythonでのデータ分析が得意だが、Webアプリやインフラの知識は少ない
- **利用環境**: PC（Linux）＋タブレット（Android）
- **目標 (ゴール)**:
  - arXiv論文や専門ブログから最新研究情報を常に追跡し、効率的に研究トピックを補完したい
- **抱えている課題**:
  - 毎日更新される論文タイトルだけでも膨大で見落としがち
  - 個人レベルで使うには大掛かりなサーバ構築は避けたい
  - 英語論文を要約するためのAIツールを検討しているが、コストが高いと予算を圧迫する
- **本システムに期待する価値**:
  - Vercelの無料枠＋AIモデルの安価プランで十分運用できるなら予算面で助かる
  - 要約された抄録＋サムネをDiscordで確認して、興味がある論文だけフルテキストを読む
  - 大掛かりなサーバセットアップ不要・コードがシンプルで自分でも改変しやすい

---

### **ペルソナ3（例・追加枠）:**
- **名前**: 佐藤 美咲
- **年齢**: 40 歳
- **職業/役職**: 中小企業のマーケティング担当
- **技術レベル**: HTML/CSS程度は触れるが、バックエンドやDB設定は未経験
- **利用環境**: オフィスPC（Windows）＋スマホ（iOS）
- **目標 (ゴール)**:
  - 競合のYouTubeチャンネルや業界ニュースを自動で収集し、要点をまとめて社内で共有
- **抱えている課題**:
  - 予算がほとんどなく、大規模なSaaSやシステム導入が難しい
  - 手動の情報収集は抜け漏れが多く、すでに限られた時間を割きすぎている
  - 要約をメールやチャットで配信してもらえればスピーディに全員が把握できる
- **本システムに期待する価値**:
  - 無料または極低コストで簡単に使えるなら導入できる
  - Discord通知なら、営業チームともリアルタイムで情報共有できる
  - サムネイルがあると何の動画/記事かすぐ分かり便利

---

## 2. ユーザーロール

> 最小構成として「管理者 (Admin)」「一般ユーザー (User)」の2ロールを想定。
> 必要に応じて閲覧専用やゲストなどの追加を検討。

- **ロール名**: **管理者 (Admin)**
  - **権限/アクセス範囲**:
    - ソースの登録/編集/削除
    - AIモデルの設定（APIキーやデフォルトモデル指定）（登録/編集/削除）
    - 通知先設定（Discord Webhook）
    - 要約処理の手動トリガー・ログ確認
    - タグ管理やユーザー管理等
  - **主な操作**:
    - 新しい YouTube チャンネルや論文フィードの追加
    - Discord通知のテンプレートカスタマイズ
    - トラブル時のエラーログ閲覧 & 対処
  - **想定する利用シナリオ**:
    - チームのリサーチ担当、研究室のIT係などが該当
    - 簡易的なシステム管理を任されている人

- **ロール名**: **一般ユーザー (User)**
  - **権限/アクセス範囲**:
    - 要約済みコンテンツの閲覧、タグ閲覧
    - 通知履歴を見る（権限次第でタグ付け/要約トリガーも可）
  - **主な操作**:
    - Discord通知のリンクをクリックし、要約をアプリ画面で詳しく見る
    - タグで絞り込んだり、要約の比較を読んだりする
  - **想定する利用シナリオ**:
    - 通知を受け取る全メンバー、研究室の学生や企業のスタッフなど
    - 記事や動画の要点をざっと確認し、必要なら詳細を読む

---

## 3. ユーザーニーズ

> ロール別に、どういう機能や操作性を求めるか簡潔に整理。

- **管理者(Admin)** のニーズ:
  1. **低コスト**: Vercel無料枠や安価なAIプランで運用したい
  2. **UIでの簡単登録**: 新しいソース追加もフォーム入力だけ、複雑な操作は不要
  3. **カスタマイズしやすさ**: Discord通知テンプレやAIモデル設定を後から変更可能
  4. **メンテナンス性**: エラーがあったらログで原因を把握しやすい、Cron等の設定をGUIでも編集できれば尚良い

- **一般ユーザー(User)** のニーズ:
  1. **すぐ内容を把握**: タイトル・要約・サムネイルを見るだけで何のコンテンツか分かる
  2. **詳細を見たければリンク or アプリ画面**: 興味があれば元動画/論文へ飛ぶ、または詳細要約を読む
  3. **タグや検索で欲しい情報に素早くアクセス**: 過去の要約にも簡単にたどり着きたい
  4. **Discordでの手軽な通知**: スマホやPCで通知を受け取り、空き時間に要約を読める

---

## 4. ユーザージャーニー

### **ジャーニー1（管理者視点）**

- **開始点**:
  - 新規導入時、管理者がシステム初回設定を行うために管理画面へアクセス
- **経路**:
  1. ダッシュボードで「ソース管理」に移動し、新しいチャンネルURL（YouTube）やRSS（ブログ/論文）を追加
  2. 「AIモデル設定」で OpenAI のAPIキーを入力し、GPT-3.5をデフォルトに指定
  3. 「通知設定」で Discord Webhook を貼り付け、テスト送信ボタンで動作確認
  4. Cronジョブが毎時実行され、初めて要約通知がDiscordに届く
- **終了点**:
  - Discordで Embed の要約通知が成功し、コンテンツ詳細画面にも要約＋サムネが反映されている状態
- **感情の変化**:
  - 導入が意外とシンプルで安心 → 要約精度やサムネイルが出るのを見て便利さを実感 → 正常稼働を確認して満足
- **改善できるポイント**:
  - Setupウィザードがあれば、さらにステップバイステップで導入できる
  - AIモデルをすぐ切り替えたいときのUIをよりわかりやすく

---

### **ジャーニー2（一般ユーザー視点）**

- **開始点**:
  - 研究室の学生「鈴木さん」がDiscordをチェックしている際、新着通知が届く
- **経路**:
  1. Embed メッセージに「タイトル」「サムネイル」「短い要約」「元リンク」が表示され、概要をすぐ把握
  2. リンクをクリック → システムの「コンテンツ詳細」ページへ飛ぶ
  3. 詳細画面で「複数AIモデル」の要約を比較しつつ興味が沸けば、さらに元リンク（論文PDF）を開く
  4. タグを付けたり、他の関連コンテンツもざっと確認
- **終了点**:
  - 欲しい情報を短時間で把握し、論文全文を読むかどうか早期に判断できる
- **感情の変化**:
  - 毎日大量のRSSを手動確認しなくて済む → 時間削減を即体感 → 満足度アップ、システムへの信頼増大
- **改善できるポイント**:
  - 要約の精度をさらに高めるためプロンプトを調整してみたい
  - モバイルで見るときのUIを最適化

---

### **ジャーニー3（拡張例）**

- **開始点**:
  - 管理者が「別のAIモデル（ClaudeやGemini）を試したい」と考える
- **経路**:
  1. AIモデル設定画面で「新規AIモデル追加」→ APIキー & モデルID を登録
  2. 既存コンテンツに対し手動再要約を実行し、OpenAIとの結果を比較
  3. Discord上には「Claude版」の要約も表示できるよう切り替え
- **終了点**:
  - 複数モデルをテストしながら、精度やコストを評価して最適なモデルを選択
- **感情の変化**:
  - モデル差を簡単に比較できて便利 → 無料クレジット範囲内で試せるのでコストリスク低 → 拡張性を実感
- **改善できるポイント**:
  - 切り替えや比較のUIをより直感的にする
  - モデルごとのコスト表示を入れるなど

---

## 総括

- **誰が使っても低コスト＆短時間で導入できる**ようにするため、**Vercel無料枠と単純なGUI**が必須。
- **初心者エンジニアでも**ソース追加やAIモデル設定が簡単にできるUI設計が重要。
- **Discord通知のEmbed**で「タイトル＋サムネ＋短縮サマリ＋元リンク」をまとめて伝えることにより、 **通知を見ただけで内容の概要が把握でき、興味があればさらにアプリ詳細or原文へ** のフローを実現。
- **一般ユーザー**は通知を受け取るだけでも十分情報を得られ、時間を節約。システムにログインすればタグ検索や要約比較など追加情報が得られる。
- **管理者**は追加でソース・AIモデル・通知設定を行い、ログからエラーを把握できれば保守コストを最小限に抑えられる。

以上のように、ペルソナ・ユーザーロール・ニーズ・ジャーニーを定義することで、**「お金をかけずに、容易に実装・導入できる」**本システムの使い方や導入効果を明確化し、開発と運用の指針を共有しやすくなります。


## 1_business_requirements/3_Scope_Definition.md

# 開発スコープ定義

> **前提:**
> - 「お金をかけず、経験の浅いエンジニアでも短期間で実装できる」ことを第一優先とするため、大規模機能や高コストインフラは極力排除し、**最小限でリリース → 徐々に拡張**の流れを想定しています。
> - ここで示すフェーズ分割や機能範囲は、あくまで目安です。実際の状況に応じて柔軟に変更してください。

---

## 1. スコープ内の機能

### **概要**
- **YouTubeチャンネル**や**外部コンテンツ**（arXiv論文、ブログ記事など）を定期監視し、**AI要約 + サムネイル + リンク**を含む通知を**Discord**に送る
- **アプリ**（Next.js フロント）でも同じ要約やコンテンツ情報を閲覧・検索できる
- **無料枠のインフラ（Vercel, Supabase等）** を使い、**小規模で**、**経験の浅いエンジニア**でもセットアップしやすいように設計

### **機能一覧**
1. **ソース管理機能**
   - 管理画面から YouTube / RSS フィードを登録し、定期的に監視
   - ソースの追加・削除・編集
2. **コンテンツ取得・要約機能**
   - 新着検知 → 字幕 or テキスト抽出 → AIモデルで要約 → DBに保存
   - Discordに Embed 通知（タイトル＋サムネ＋要約＋リンク）
3. **コンテンツ管理・検索機能**
   - タグ付け、一覧表示、要約比較（複数AIモデル時）
   - ユーザーが簡単に目的の要約を見つけられるUIを実装

### **今回のリリースで実装する機能範囲**
- **フェーズ1 (αリリース)**
  - YouTubeチャンネル / 一般的なブログRSS 監視
  - gemini-2.0-flashとの連携（デフォルトAIモデル）
  - Discord通知（要約 + リンク + 簡易サムネ）
  - コンテンツ一覧表示（シンプルなタグ付け含む）
  - Vercel無料枠とSupabase無料枠でデプロイ、最低限の管理画面でソース・AIキー設定が可能

> **理由**: まずは最低限のプロトタイプで価値を検証し、手動作業がどれだけ削減されるかを確認する。

---

## 2. スコープ外の機能

### **今回は扱わない機能**
- **マルチAIモデル同時比較**: Claude, OpenAI などの並列要約や高度な比較UI
- **高度なアクセス制御**: たとえばロールベースの細分化やSSO、権限制御の細かい設定
- **高負荷対応 / スケールアウト**: 同時アクセス数が数万件を超えるような大規模トラフィック対策
- **自動翻訳機能**: 他言語の翻訳出力、ChatGPT+DeepL等を組み合わせた要約
- **モバイルアプリ**: iOS/Android用のネイティブアプリとしての専用UI
- **リッチな可視化**: 要約のグラフ表示やAIの信頼度スコアなどの高度な可視化

### **スコープ外とする理由**
- **予算制限**: Claude/OpenAI等の追加モデル連携には追加コストが発生する可能性大
- **優先度**: まずは1つのAIモデルで成果を出すことが先決
- **開発工数**: 経験の浅いエンジニアでも短期間でリリースするため、実装範囲を絞る
- **運用負荷**: 大規模スケールや翻訳機能などは後からの拡張で検討

---

## 3. フェーズ分割

### **フェーズ1**: **基礎版リリース** (期間: 約2〜3週間)
- **対象機能**:
  1. YouTubeチャンネル & ブログのRSS 監視
  2. テキスト/字幕取得 → gemini-2.0-flashで要約
  3. Discord 通知 (タイトル + サムネ + 要約 + リンク)
  4. コンテンツ一覧表示 & タグ付け (基本的なDB操作)
  5. シンプル管理画面 (ソース登録、AIキー設定、Discord Webhook設定)
- **狙い**:
  - 低コスト環境（Vercel無料, Supabase無料）で立ち上げ、手動作業と比較し**50%以上の時間削減**を実現
  - システム基盤の安定動作を検証

### **フェーズ2**: **機能拡張** (期間: 約1〜2ヶ月)
- **対象機能**:
  1. arXiv論文など更なる外部ソースの追加
  2. 複数AIモデル連携 (Claude, OpenAI) → 要約比較UIの整備
  3. 高度な通知カスタマイズ (Embed フィールド追加, プレビューなど)
  4. ページネーションや高度な検索/フィルタ (日付範囲,タグ検索)
  5. ログ閲覧やエラーレポート機能の拡充
- **狙い**:
  - 要約精度やAIモデル比較を強化
  - 運用の安定化と細かな利便性向上

### **フェーズ3**: **高度機能・最適化** (必要に応じて)
- **対象機能**:
  1. 翻訳機能の追加 (多言語対応)
  2. モバイル最適化 / PWA
  3. 大規模スケーリング対策 (CDNキャッシュ,負荷試験)
  4. 分析ダッシュボード (どの要約がよく読まれているか等)
- **狙い**:
  - さらなる拡張や企業導入レベルの要件に対応
  - プロジェクト成長に合わせた最適化

> **注:** フェーズ3 は「将来的に要件が出たら検討する」形で、予算・技術力に余裕ができてから実施する想定

---

## 4. 今後の拡張予定

- **翻訳 + 要約**: 海外の技術動画や英語論文を自動翻訳のうえで日本語要約
- **オフライン対応 / PWA**: スマホでの快適な操作、通知管理
- **自動トークンスケール**: 例: 要約トークン数が増大したとき追加料金が発生しないようモニタリング
- **チームコラボ機能**: 要約にコメントを付けたり、Slack や他チャットツールにも同時通知など
- **シングルサインオン(SSO)**: 大企業向け連携

> **拡張に備えた前提条件**:
> - コードを「フェーズ2 以降のAIモデル追加」や「外部API 追加監視」などを考慮し、**プラガブルな構成**にしておく
> - Discord 以外の通知手段（Slack, Teams, etc.）に発展させやすいよう、**通知抽象化の設計**を考慮
> - DBスキーマを余裕を持って設計し、**metadata** や **tags** テーブルで柔軟にカスタム情報を扱えるようにする

---

### まとめ

- **スコープイン**: 最低限の「YouTube/ブログ監視 → AI要約 → Discord通知 → アプリ閲覧」の流れを中心に、タグ付けなどの基本管理機能を含む
- **スコープアウト**: 複数AIモデル比較や高度な翻訳、大規模スケール、特殊なアクセス制御などは**後回し**にし、まずは**短期間でリリース**できる形を優先
- **フェーズ分割**: フェーズ1 で基盤を完成、フェーズ2 で拡張、フェーズ3 で高度化・最適化
- **将来的な拡張**: 翻訳機能や追加API監視、チームコラボなどニーズに応じて検討

これらを踏まえ、**最小リリース**(MVP)を早期に完成させ、**実際の効果**(手動作業の削減率や要約精度)を検証しつつ、段階的に改良を重ねるのが理想です。


## 1_business_requirements/4_Project_Organization.md

# プロジェクトの進め方・体制

> **前提:**
> - このプロジェクトは「**お金をかけずに、容易に経験の浅いエンジニアが実装できること**」を最優先とし、**短い期間で最低限のシステムをリリース→段階的に改良**する方針をとっています。
> - 以下の役割分担・コミュニケーションルール等はあくまで例示です。実際のチーム構造に応じて柔軟に変更・削除・追加してください。

---

## 1. プロジェクトメンバーの役割分担

### **プロダクトオーナー (PO)**
- **責任範囲・役割**:
  - プロダクトのビジネス目標設定と優先順位づけ
  - “YouTubeおよび外部コンテンツ情報収集・要約システム” の開発ロードマップ策定
  - 経営層・ステークホルダーへのレポート
- **具体的な業務**:
  - スプリントごとの要件優先度決定
  - KPI（情報収集時間削減率など）のモニタリング
  - 要望リスト管理（バックログ）

### **プロジェクトマネージャー (PM)**
- **責任範囲・役割**:
  - スケジュール管理、進捗把握、リスク管理
  - チームメンバー間のタスク割り振り
  - コスト（主に無料枠利用計画）の最適化
- **具体的な業務**:
  - 毎週の進捗確認、問題点ヒアリング
  - 短期スプリントのゴール設定、タスクアサイン
  - ベンダーや外部委託先との調整

### **リードエンジニア**
- **責任範囲・役割**:
  - 技術選定（Next.js, Vercel, Supabase, AIモデルAPIなど）
  - 経験の浅いエンジニアを支援し、設計指針を示す
  - CI/CD パイプライン、DB構築、API設計の監修
- **具体的な業務**:
  - 全体アーキテクチャの作成とレビュー
  - コードレビュー、トラブルシューティング
  - 技術的な意思決定（例: どの段階でGeminiを追加するか、スクレイピング方法 等）

### **デザイナ (UI/UX)**
- **責任範囲・役割**:
  - 管理画面やコンテンツ一覧画面、通知設定画面などのUI設計
  - 見やすさ・操作性・アクセシビリティの向上
- **具体的な業務**:
  - ワイヤーフレーム、デザインカンプ作成
  - Tailwind CSSのカスタム（色・フォント・レイアウト）
  - ユーザービリティテストへの協力

### **QA (品質保証)**
- **責任範囲・役割**:
  - システムのテスト計画・実施、品質向上
  - リグレッションテスト・結合テストなどで不具合を洗い出し
- **具体的な業務**:
  - スプリントごとのテストケース作成
  - 本番リリース前のE2Eテスト（要約出力の確認、Discord通知確認 等）
  - 不具合レポート・再発防止策提案

### **その他 (外部委託先・ベンダー)**
- **契約形態・連絡先**:
  - 準委任契約 or 請負契約（状況次第で選択）
  - 具体的には、AIモデル追加の専門家、UIデザイン支援ベンダー 等を想定
- **担当範囲**:
  - システム稼働後に追加が必要になった高度なスクレイピングなどを外注する場合に限る
  - 原則、費用を抑えるため **外部委託は最小限** にする

> **ポイント:**
> - 多くの場合、初期フェーズでは**社内リソースで十分**対応可能。どうしても専門知識が必要な箇所（例: ClaudeやGeminiの特殊API連携）だけスポットで外部支援を得るイメージです。

---

## 2. コミュニケーションルール

### **定例ミーティングの頻度/参加者/目的**

- **週1回の定例** (例: 月曜 10:00-10:30)
  - **参加者**: PO, PM, リードエンジニア, QA, 必要に応じてデザイナ
  - **目的**:
    - 先週の進捗確認、今週のタスク確認
    - リスク・課題の共有（AIモデルのAPI制限、無料枠超過など）
    - 短いスプリントで小機能をリリースし、フィードバックを即反映
- **デイリー／随時** (任意)
  - メンバー同士の個別相談やエンジニア間の技術課題共有はSlack等で適宜実施

### **コミュニケーションツール**

- **チャットツール**: Slack or Discord (メイン連絡手段)
- **オンライン会議**: Zoom or Google Meet
- **メール**: 公式文書・契約関連の送付時のみ
- **チケット管理**: GitHub Issues or Trello/Jira (無料プランで十分)

> **目的:** お金をかけず、使い慣れた無料ツールを最大活用し、経験の浅いエンジニアも導入しやすい方法を採る。

---

## 3. ベンダー管理

> 本プロジェクトでは「低コスト・短期間開発」を志向するため、**外部委託は最小限**。必要なら準委任契約でスポット支援を得るイメージ。

### **外部委託範囲**
- **AIモデル専門家**: Claude/Geminiの導入や高度なプロンプト設計の相談
- **UI/UX追加デザイン**: 内製リソースが足りない場合のみスポットで発注
- **スクレイピング**: 特殊なサイトや認証が必要なサイト監視など

### **契約形態**
- **準委任契約**: 時間ベースの作業支援をお願いし、発生都度精算する方法
- **請負契約**: 外部に特定機能（例: Gemini連携）を完全に任せる場合。納期・成果物ベース
- **小規模発注の場合**: フリーランスや外部サービス（ココナラ等）を利用して単発サポート

### **成果物や納期の管理方法**
- **GitHub Issues**: 外部パートナーもアクセス可能にし、タスク単位で進捗共有
- **レビュー/検収**: プルリク形式でコードレビュー→問題なければマージ
- **納期**: PMが週次定例で確認し、ズレがあれば早期にリスケ調整

---

## 4. プロジェクトマイルストン

### **スケジュール概要**

1. **フェーズ1 (2～3週間)**
   - Next.js 基盤・DB接続・YouTube監視＋OpenAI要約＋Discord通知のMVP完成
   - **目標**: 要約とDiscord通知が一通り動作し、情報収集時間が大幅削減される
2. **フェーズ2 (1～2ヶ月)**
   - 論文/ブログ監視追加、複数AIモデル連携（Claude, Gemini）、タグ管理強化、簡易検索
   - **目標**: 運用拡大しつつ、要約品質・機能性アップ
3. **フェーズ3 (必要に応じて)**
   - 高度機能（翻訳機能、モバイルPWA化、大規模対応 など）
   - **目標**: システムをより幅広い環境・大規模ユーザーに対応可能にする

### **成果物提出のチェックポイント**

- **αリリース (フェーズ1終了時)**
  - 管理画面でソース登録+AIモデル設定
  - YouTube 新着がDiscord通知されることを確認
  - 要約結果がDBに保存され、アプリ詳細画面で閲覧できる
- **βリリース (フェーズ2終了時)**
  - 論文やブログ監視が稼働
  - 複数AIモデル比較UIが動作
  - 全体的にタグ管理や検索の利便性を確保
- **正式リリース**
  - 運用ドキュメントが整備され、エラーや問題発生時の対処法も確立
  - チーム内で「手動作業の削減度合い」を検証し、50%以上の削減を達成

> **注:** それぞれのマイルストンで、PMやリードエンジニアが **レビュー＆承認** を行い、問題なければ次のフェーズへ進む。
> 必要なら各フェーズで「試験運用」「小規模ユーザーへのトライアル」を挟み、継続的にフィードバックを得る。

---

### 総括

- 本プロジェクトは、**小規模なエンジニアリングチーム**や**経験の浅いエンジニア**でも、**低コスト・短期間**で開発・運用できるように体制を構築する。
- **役割分担**を明確にし、**週1回の定例ミーティング**や**Slackでの日常的なコミュニケーション**を徹底することで、無駄なコストや手戻りを抑える。
- ベンダー委託は最低限に留めつつ、必要な専門家をスポット契約（準委任）で活用し、**高コスト化を防ぐ**。
- **フェーズ単位のマイルストン**を設定し、小さく成功を積み重ねて最終的に安定した運用と高い要約品質を実現する方針。

こうした進め方・体制によって、**「お金をかけずに、容易に経験の浅いエンジニアが実装できる」** 要件を満たしつつ、継続的な機能拡張にも対応可能なプロジェクト運営が期待できます。


