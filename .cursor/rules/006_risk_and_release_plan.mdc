---
description: 
globs: 
alwaysApply: false
---
---
description: リスクとリリース計画
globs: ["**/config/constants.ts", "**/config/routes.ts", "**/lib/middleware/**/*.ts"]
alwaysApply: false
---
# リスクとリリース計画

## 6_risk_and_release_plan/1_Risk_Management.md

```markdown
# リスク管理

> **前提**:
> - コストをかけずに小規模スタート → 将来拡張を意識
> - 経験の浅いエンジニアも**短期間で導入・運用**できる形を優先
> - Vercel 無料プラン + Supabase 無料枠 を軸とするため、**無料枠超過リスク**などに留意

---

## 1. リスク一覧

| リスクNo | リスク内容                                                        | 発生確率 | 影響度 | 対策・軽減策                                                                     |
|---------|-------------------------------------------------------------------|----------|--------|-----------------------------------------------------------------------------------|
| R001    | **Vercel無料枠の上限超過**<br>アクセス急増やCron増加によるオーバー | 中       | 大      | - 初期は無料枠で十分だが、**アクセス分析**を行い超過しそうなら早期に有料プラン検討<br>- Cron頻度を**毎時**以上増やす場合は発生リスク大 |
| R002    | **Supabase無料枠超過**<br>DBトランザクション数、ストレージ制限     | 中       | 中      | - 定期的に**DB使用量を監視**し、不要データをアーカイブ or 削除<br>- アクセス増に応じて**有料プラン移行**を計画 |
| R003    | **AIモデルAPIコスト**<br>OpenAI などトークン消費量の予想超過        | 中       | 中      | - 要約の**段階数**や**文字数**を制限し、意図せず大量課金を防ぐ<br>- 月額上限・警告通知など**APIダッシュボード**で設定 |
| R004    | **YouTube Data API or RSSが変更**<br>廃止/仕様変更で取得不可       | 低       | 中      | - RSSフィードが使えなくなった場合、**YouTube Data API** 公式を参照<br>- 定期的にリリースノートを確認し、**対応策**を早期検討 |
| R005    | **AI要約精度が期待未満**<br>モデル更新で挙動変化、結果が読みにくい   | 中       | 小      | - **複数モデル比較機能**を使い、より良いモデルを選択<br>- 要約テンプレを**都度修正**し、最適化を図る |
| R006    | **セキュリティインシデント**<br>JWTキー・APIキー流出, 不正アクセス  | 低       | 大      | - `.env.local` + Vercel環境変数で**秘密情報を管理**しリポジトリに含めない<br>- Supabase側で**RBAC**やネットワーク制限を活用 |
| R007    | **初心者エンジニアの運用負荷**<br>保守ノウハウ不足                  | 中       | 中      | - ドキュメント整備（セットアップガイド、運用マニュアル）<br>- ステージング環境で検証→本番反映の流れを簡素化 |
| R008    | **Discord Webhookエラー**<br>URL不備や認証エラーなど               | 中       | 小      | - エラー発生時に**通知ログ**を記録 → 管理画面で確認<br>- 代替通知先（Slackなど）を**将来拡張**で検討 |

---

## 2. リスク対応計画

1. **事前回避策**
   - **CI/CD** で自動テスト＋プレビュー環境を用い、リリース前の不具合や過負荷を早期発見
   - Vercel / Supabase の**使用量ダッシュボード**を週1回チェック
   - AIモデル呼び出しは**段階数やトークン上限**を事前に設定

2. **発生後の対処方法**
   - **無料枠超過** → 有料プランへのスムーズなアップグレード手順を予め共有
   - **セキュリティインシデント** → 直ちに鍵をローテーション（JWT Secret, APIキー）し、影響範囲調査
   - **YouTube RSS変更** → 当面は**公式API**で代替し、仕様アップデートを追随

---

## 3. リスクレビューサイクル

1. **見直し頻度**
   - **2週間に1回**（スプリントレビュー時） or **月1回**程度、リスクリストを確認
   - 主要リリース前にも**再チェック**し、対策状況を更新

2. **報告方法**
   - チームの**定例ミーティング**でリスクステータスを共有
   - 新たなリスクや発生リスクの**度合い変更**はIssueに記載し、Slack/Discordなどで通知

このサイクルを回すことで、初心者エンジニアでも**大きな問題になる前に**リスクを把握・対応しやすくする。将来的に機能・ユーザー数が増えた際も、リスク管理の仕組みが整っていればスムーズに運用を拡張できる。
```

## 6_risk_and_release_plan/2_Release_Schedule.md

# リリース計画

> **前提:**
> - **無料枠(Vercel＋Supabase)** でシステムを稼働させ、**初心者でも短期間**で導入・保守できるようにする
> - 小さくリリース → フィードバックを得ながら段階的に拡張
> - 各フェーズごとの納期を厳格にせず、**1週間以内のMVPリリース**を最優先とする

---

## 1. 開発フェーズ別スケジュール

| フェーズ          | 期間(目安)       | 主要マイルストーン                                                    |
|-------------------|------------------|-----------------------------------------------------------------------|
| **フェーズ1:** 基盤構築  | ~1週間         | - Next.js + Tailwind セットアップ<br>- Supabase DB構成定義<br>- 認証(メール&Google OAuth)実装<br>- MVP版デプロイ(無料枠) |
| **フェーズ2:** 監視機能 | +1〜2週間程度  | - YouTube/RSS監視実装<br>- Cronジョブ設定(Vercel毎時実行)<br>- AI要約の土台 |
| **フェーズ3:** AI要約・通知 | +1〜2週間程度  | - AI要約API連携（Gemini-2.0-flash等）<br>- Discord通知機能<br>- コンテンツ一覧/詳細画面 |
| **フェーズ4:** 拡張機能    | 随時           | - タグ機能・複数AIモデル比較<br>- 段階的要約の最適化<br>- 通知テンプレ強化 等   |

> **補足:**
> - 上記期間はあくまでも**目安**。小規模チーム/初心者前提で、着実にリリースを回す方針
> - 各フェーズ完了ごとに**簡単なレビュー＆ユーザーフィードバック**を取り入れる

---

## 2. リリース手順

1. **ステージングデプロイ**
   - 新機能や修正を**GitHubブランチ**で開発
   - Pull Request → 開発環境（dev）で確認
   - 主要機能が揃ったら**ステージング用環境**にデプロイ（環境変数はステージング用に設定）

2. **テスト/承認**
   - ステージング環境で**基本テスト**（E2E/動作確認）
   - 要求仕様や**リリースチェックリスト**に合致しているか確認
   - 問題なければ**承認**を得て、本番リリースへ進む

3. **本番デプロイ**
   - メインブランチへのマージで**Vercel本番**へ自動デプロイ
   - デプロイ後すぐに**サーバレスFunctions**が更新され、新バージョンが有効化される

4. **スモークテスト/完了報告**
   - 本番環境で**最低限の動作確認**（ログイン/要約/通知など）
   - 問題なければ**リリース完了**をSlackやDiscordで周知

---

## 3. ロールバック手順

1. **スナップショット取得**
   - Vercelのデプロイ履歴を活用し、**前バージョンのビルドID**を記録
   - DBはSupabaseで**バックアップ/エクスポート**を定期取得（weeklyなど）

2. **前バージョン復元方法**
   - Vercelの「**Revert to Previous Deployment**」機能 or Gitの`revert`コミットで復旧
   - DBスキーマ変更が原因の場合は**マイグレーションのロールバック**を実行

3. **想定ダウンタイム**
   - VercelのRevert自体は**ほぼ無停止**で切り替え可能
   - DBロールバックが必要な場合は**数分程度のメンテナンス時間**が発生する恐れあり

---

## 4. メンテナンス告知

1. **告知手段**
   - DiscordチャンネルやSlackに「メンテナンス予定」のポスト
   - システム管理画面などに**案内欄**を表示（将来機能）

2. **告知タイミング**
   - **小規模更新**: リリース数時間前に告知
   - **大規模変更**: 1日〜数日前に告知 → 詳細なメンテナンス内容や停止時間を明記

告知テンプレ例:
```
【メンテナンス告知】
日程：〇月〇日(〇) 〇:〇〇〜〇:〇〇 (予定)
内容：AI要約機能アップデート
影響：上記時間中、一時的に要約機能が利用できない可能性があります
ご不便をおかけしますが、ご理解のほどよろしくお願いいたします
```

---

> **まとめ:**
> - **1週間以内にMVPリリース** → フィードバックを得ながら**段階的に拡張**
> - **リリース/ロールバックはVercelの履歴管理**を活用 → 低リスク運用
> - **メンテナンス告知**のルールをあらかじめ定めておくことで、初心者エンジニアでも安心して運用可能
> - 将来的にユーザーや機能が増えても、**段階的にプラン移行・手順拡張**すれば柔軟に対応できる
```


## 6_risk_and_release_plan/3_Post_Release_Improvement.md

# 運用開始後の課題管理・改善計画

> **前提:**
> - **無料枠 (Vercel + Supabase)** を活用し、MVP を早期リリース後、段階的に機能拡張
> - **初心者エンジニアでも運用しやすい**仕組みを構築し、**課題管理と改善**をスムーズに行う
> - **KPI からフィードバック**を得ながら、定期的に改善サイクルを回していく

---

## 1. KPI定義

- **情報収集時間削減率**
  - 例: 「YouTube動画や論文を追う時間を何%短縮できたか」
  - 本システム導入前後での工数を比較 → 目標は**50%以上**削減
- **Discord 通知のクリック率**
  - 例: 通知メッセージ経由で実際に詳細画面にアクセスした割合
  - 通知の要約精度や見やすさを検証
- **アクティブユーザー数 (MAU/WAU)**
  - どの程度ユーザーがリピートして利用しているか把握
  - 将来、大規模運用を見据える場合に有用
- **AI要約成功率**
  - 要約APIのエラー率, タイムアウト頻度など
  - 無料枠/トークン上限に関する失敗件数も把握

> **KPI の例:**
> 1. 2週間で60%以上の情報収集時間削減を実感するか
> 2. 通知のクリック率が最初の1ヶ月で30%以上
> 3. 毎月のMAUが継続的に増加 (例: ＋10%/月)

---

## 2. モニタリング項目

1. **エラー率**
   - ユーザー操作時のAPIエラー(4xx/5xx), 要約API呼び出し失敗率など
   - Vercel のログ or Supabase のログでトラッキング

2. **レスポンスタイム**
   - Next.js API Routes の応答時間
   - Supabase DBクエリの実行時間
   - 目標は**基本100〜300ms程度** (簡易UIなら十分)

3. **ユーザー行動**
   - ログイン数, 認証失敗数
   - 通知クリック数, 要約閲覧数
   - タグ付け/検索回数

4. **Cron実行状況**
   - Vercel Cron Jobs (毎時)の成功/失敗回数
   - RSS/YouTube 取得件数, 監視対象の増減

5. **AIモデル利用コスト**
   - API呼び出し回数, トークン使用量(無料枠 vs 有料課金)
   - 将来的に**使用上限**に近づいたらアラート

> **モニタリング方法**
> - **Vercel Analytics**: 基本的なエラー/応答時間
> - **Supabase モニター**: DBのクエリ状況 / テーブルIO
> - **外部ツール (Sentry / Datadog)**: エラー監視・パフォーマンス計測

---

## 3. 課題管理

1. **課題登録手順**
   - GitHub Issues やタスク管理ツール(Trello/Jira)に**課題タイトル＋詳細**を記入
   - 再現手順や発生日などを簡潔にまとめる

2. **優先度付け**
   - 緊急度(高/中/低)＋影響度(大/中/小)で**プライオリティ**を決定
   - 例: 「AI要約が全て失敗する」は最優先 (高・大)、「UIの細かな見た目の修正」は低優先

3. **タスク化**
   - 課題を開発タスクに落とし込み、誰が担当かアサイン
   - Smallタスクに分解 (初心者でも着手しやすい粒度)

4. **進捗管理**
   - Kanban形式で**ToDo / In Progress / Done**のステータス管理
   - 定期的に課題一覧を見直し → 優先度の再設定

> **運用例:**
> - 新規課題発生 → GitHub Issueに登録 → タグ(バグ/機能要望/要調査等)で分類
> - デイリー/ウィークリーでIssueを確認し、対応中or保留を決定

---

## 4. 改善サイクル

1. **定期レビュー (Weekly/Monthly)**
   - 1週間 or 1か月単位で**KPIやモニタリング結果**をざっと確認
   - 課題リストを更新 → 高優先のものから次スプリントで対応

2. **ユーザーフィードバック**
   - Discord/Slackなどでユーザーが気づいた不満や要望を吸い上げ
   - 定期的にまとめて**対応可否**を判断

3. **改善タスクの実装**
   - 優先度が高い順に小さく改善 → リリースしてフィードバック
   - リリースごとに**要約精度やUI**を向上させる

4. **次のレビュー**
   - 改善リリース後の効果検証 (KPIの変化, エラー率の減少)
   - フィードバックがあればさらに次の改善タスクへ

> **ポイント:**
> - **小さくリリースして効果検証→次を計画**する短いスプリントサイクル
> - **初心者でも**Issueで議論→PR作成→デプロイの流れを回せるようにする
> - KPI達成状況やユーザー満足度に応じて**優先度再調整**しながら継続改善

---

## 要約

- **KPI**を設定し、**モニタリング**でエラー率/ユーザー行動/コストを把握する
- 課題はGitHub Issuesなどへ登録 → 優先度を付けて**定期レビュー**
- ユーザーフィードバックを積極的に収集し、**小さな改善サイクル**を短期で回す
- **初心者でも**参加しやすい運用を意識し、**段階的に機能拡張**しながらシステムを成熟させる

これにより、**運用開始後に発生する問題**を**迅速に検知・対応**し、**常にユーザーにとって有用な状態**を保ちつつ、**長期的にシステムが安定稼働**できるようになります。
