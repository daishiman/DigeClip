---
description: フロントエンド機能要件
globs: "src/app/**/*.{tsx,jsx,ts,js}", "!src/app/api/**/*", "src/components/**/*.{tsx,jsx,ts,js}", "src/hooks/**/*.{tsx,jsx,ts,js}", "src/context/**/*.{tsx,jsx,ts,js}"
alwaysApply: true
---
# フロントエンド機能要件

# フロントエンド共通要件

## 概要
このドキュメントは、DigeClipフロントエンドの共通要件を定義します。各画面やコンポーネントの仕様書から共通部分を抽出し、一元管理することで、要件の重複を避け、整合性を確保します。

> **注意:** 共通技術スタックについては [../../0_common/1_Common_Technology_Stack.md](../../0_common/1_Common_Technology_Stack.md) を参照してください。
> エラーハンドリング、セキュリティ、パフォーマンス、テスト要件などの共通要件については [../../0_common/2_Common_Requirements.md](../../0_common/2_Common_Requirements.md) を参照してください。

## フロントエンド固有の要件

### 1. レスポンシブデザイン
- すべての画面はモバイル（最小幅320px）、タブレット（最小幅768px）、デスクトップ（最小幅1024px）に対応すること
  - モバイルでは縦スクロールを基本とし、重要な情報を上部に配置
  - タブレットでは横向き表示も考慮し、情報の密度を調整
  - デスクトップでは複数カラムを活用し、情報を効率的に表示
- 画面サイズに応じたレイアウト調整を行い、ユーザー体験を最適化する
  - 各デバイスでの操作性を考慮し、タップ領域やクリック可能な要素を適切に配置
- フレックスボックスやグリッドレイアウトを用いて、要素の配置を柔軟に変更可能にする
  - レスポンシブなデザインを実現するために、フレックスボックスを使用して要素の並びを動的に変更
  - グリッドレイアウトを用いて、複雑なレイアウトを簡潔に実装
- メディアクエリを使用して、特定の画面サイズに応じたスタイルを適用し、視認性を向上させる
  - 各ブレークポイントでのスタイルを詳細に設定し、デバイス間での一貫性を保つ

### 2. UI/UXデザイン
- 一貫性のあるデザインシステムを採用し、全画面で統一感のあるユーザー体験を提供する
  - 共通のカラーパレット、フォント、アイコン、コンポーネントを使用
  - Tailwind CSSを使用し、クラス名の一貫性を確保
- モバイルファーストのアプローチで設計し、タッチ操作に最適化する
  - タップターゲットは最低44x44ピクセルを確保し、誤操作を防止
  - スワイプジェスチャーやピンチズームなどのタッチ操作をサポート
- 視覚的階層を明確にし、重要な情報や操作を優先的に表示する
  - コンテンツの重要度に応じた適切な視覚的ウェイトを設定
  - 主要アクションは目立つボタンで表示し、副次的アクションは控えめに設計
- 処理中や読み込み中の状態を明示し、ユーザーに適切なフィードバックを提供する
  - ローディングインジケーターやスケルトンスクリーンを表示
  - 長時間処理の場合は進捗状況を表示
- ダークモードとライトモードの両方をサポートし、ユーザーの好みや環境に合わせて切り替え可能にする
  - システム設定に連動した自動切り替え機能を実装
  - カラーコントラストはどちらのモードでも適切に保つ

### 3. フロントエンド固有のアクセシビリティ
- フォーカス管理を徹底し、ユーザーが意図した順序で要素を操作できるようにする
  - フォーカスの移動順序を論理的に設定し、ユーザーの操作を円滑にする
- フォームコントロールには適切なラベルを関連付け、スクリーンリーダーでの理解を助ける
  - label要素とfor属性を使用し、フォーム要素との関連性を明示
- 動的コンテンツの変更をスクリーンリーダーに通知する
  - aria-liveリージョンを使用し、重要な更新を適切に伝達

### 4. フロントエンド固有のパフォーマンス最適化
- 不要なレンダリングを防ぎ、スムーズなインタラクションを実現する
  - メモ化（React.memo, useMemo, useCallback）を適切に使用
  - 仮想スクロール（react-window/react-virtualized）を大量リスト表示に適用
- バンドルサイズを最小化し、初期読み込み時間を短縮する
  - Tree Shakingを活用し、未使用コードを除外
  - 重複依存関係を最小化
- クライアントサイドのキャッシュ戦略を実装
  - SWRやReact Queryを活用したデータキャッシュ
  - 静的アセットのブラウザキャッシュ活用

### 5. フロントエンド固有のテスト
- コンポーネントの単体テストを実装
  - React Testing Libraryを使用したユーザー操作シミュレーション
  - スナップショットテストによるUI変更の検出
- ビジュアルリグレッションテストの実施
  - Storybookと連携したビジュアルテスト
  - 画面サイズごとのレイアウト検証

# 画面一覧・画面遷移図

> **注意:** このドキュメントでは、画面一覧と画面遷移を定義します。共通要件（レスポンシブデザイン、エラーハンドリング、アクセシビリティなど）については [0_Common_Requirements.md](../../3_Frontend_Functional_Requirements/0_Common_Requirements.md) を参照してください。

> **前提:**
> - このプロジェクトは「**お金をかけずに、経験の浅いエンジニアが短期間で実装**」できることを優先するため、**画面構成も最小限**でスタートし、**将来拡張**する前提で設計します。
> - 以下では **初期リリース (フェーズ1)** と **将来対応 (フェーズ2 以降)** に分けて画面一覧と遷移を示します。
> - 各画面の詳細仕様は `screens/` ディレクトリ内の対応するファイルを参照してください。

---

## 1. 画面一覧

### **【初期リリース (フェーズ1)】**

1. **ログイン画面 (Login)** - [詳細仕様](./screens/1_Login.md)
   - 認証画面（管理者のみ利用／一般ユーザーは閲覧のみの場合は省略可）
2. **ダッシュボード画面 (Dashboard)** - [詳細仕様](./screens/2_Dashboard.md)
   - 簡易ステータス表示（新着コンテンツ数、要約結果数、通知履歴など）
   - 「ソース管理」「AIモデル管理」「通知設定」「コンテンツ一覧」などへの導線
3. **ソース管理画面 (Source Management)** - [詳細仕様](./screens/3_SourceManagement.md)
   - 監視対象のYouTubeチャンネル / ブログRSS / 論文RSS の登録・編集・削除
4. **AIモデル設定画面 (AI Model Settings)** - [詳細仕様](./screens/4_AIModelSettings.md)
   - AIモデル一覧表示（OpenAI / Claude / Gemini）
   - API Key 設定、デフォルトモデルの選択
5. **通知設定画面 (Notification Settings)** - [詳細仕様](./screens/5_NotificationSettings.md)
   - Discord Webhook URL 入力
   - 通知テンプレート(Embed タイトルや文言)の編集
   - テスト送信ボタン
6. **コンテンツ一覧画面 (Content List)** - [詳細仕様](./screens/6_ContentList.md)
   - 収集済みコンテンツのタイトル・サムネ・要約ステータス表示
   - タグや日付、ソース別フィルタ
   - 検索機能（簡易）
7. **コンテンツ詳細画面 (Content Detail)** - [詳細仕様](./screens/7_ContentDetail.md)
   - タイトル・サムネ・元リンク・要約結果
   - 複数AIモデルがある場合はタブ切り替え or 一覧比較
   - 通知履歴の確認（いつ通知したか等）
   - タグ追加・削除

---

### **【将来対応 (フェーズ2 以降)】**

1. **タグ管理画面 (Tag Management)** - [詳細仕様](./screens/8_TagManagement.md)
   - タグの一覧表示・新規登録・色設定
   - タグの並べ替え / グルーピングなど
2. **ユーザー管理画面 (User Management)** - [詳細仕様](./screens/9_UserManagement.md)
   - 複数管理者やロールの追加・削除
   - パスワードリセット機能など
3. **システム設定画面 (System Settings)** - [詳細仕様](./screens/10_SystemSettings.md)
   - Cron 実行間隔、データ保持期間、ログレベルなど細かいシステムパラメータ設定
4. **アドバンストAIモデル比較画面 (Advanced AI Comparison)** - [詳細仕様](./screens/11_AdvancedAIComparison.md)
   - 同じコンテンツに対する複数モデル要約をグラフやテキストで詳細比較
   - トークン消費や要約時間などの計測表示
5. **翻訳機能画面 (Translation Settings)** - [詳細仕様](./screens/12_TranslationSettings.md)
   - 多言語翻訳の有無や翻訳対象言語を選ぶUI
6. **大規模運用向け画面 (Large-Scale Operation)** - [詳細仕様](./screens/13_LargeScaleOperation.md)
   - CPU/Memory負荷モニタ、API呼び出し回数グラフなど

> **注意:** 将来対応画面は必要に応じて追加していく形で、フェーズ1 ではスコープ外とします。

---

## 2. 画面遷移図

```mermaid
flowchart LR
    A[ログイン(Login)] --> B[ダッシュボード(Dashboard)]
    B --> S[ソース管理画面]
    B --> M[AIモデル設定画面]
    B --> N[通知設定画面]
    B --> C[コンテンツ一覧画面]

    S --> B
    M --> B
    N --> B
    C --> B
    C --> D[コンテンツ詳細画面]

    D --> C

    %% 将来対応画面
    B --> T[タグ管理画面]
    B --> U[ユーザー管理画面]
    B --> SS[システム設定画面]
    B --> AC[アドバンストAIモデル比較画面]
    B --> TS[翻訳機能画面]
    B --> LO[大規模運用向け画面]
    D --> AC
```

**説明:**
- ユーザー（管理者）はまず **ログイン画面(A)** を通って **ダッシュボード(B)** にアクセス
- ダッシュボードから各種管理画面（ソース管理, AIモデル設定, 通知設定）へ遷移
- **コンテンツ一覧(C)** から詳細(D) を見る流れがメイン
- 将来対応で追加される画面（タグ管理, ユーザー管理, システム設定, 高度AI比較など）はダッシュボードから遷移する想定
- アドバンストAIモデル比較画面はダッシュボードからだけでなく、コンテンツ詳細画面からも遷移可能

---

## 3. 画面間の連携

1. **ログイン → ダッシュボード**:
   - 管理者ログイン成功時にダッシュボードへ
   - 一般ユーザーがログインする必要がなければログイン画面は省略可

2. **ダッシュボード → (ソース管理 / AIモデル設定 / 通知設定 / コンテンツ一覧)**:
   - メインメニューやカードリンクから遷移
   - 戻る操作でダッシュボードへ

3. **コンテンツ一覧 → コンテンツ詳細**:
   - 一覧のアイテムをクリックすると詳細画面に遷移
   - タグ等のフィルタは一覧画面のみで行い、詳細画面には表示専用機能

4. **将来対応画面**（タグ管理・ユーザー管理 など）:
   - ダッシュボードからのリンクを追加
   - 各画面で CRUD 操作後、完了時はダッシュボードか一覧画面へ戻る
   - アドバンストAIモデル比較画面はコンテンツ詳細画面からも遷移可能

5. **エラー時遷移 (未ログイン / 権限不足 / 404 / 500)**:
   - 未ログインで管理画面アクセス時、**ログイン画面**へリダイレクト
   - 存在しないURL は **404エラーページ**(簡素でOK)
   - サーバエラー 500 発生時はエラー画面 or ポップアップ表示

---

## 4. 備考

- **セッション管理**:
  - 管理者ログイン時に **NextAuth** 等でトークンを発行
  - ユーザーが要約を見るだけなら認証不要の読み取り専用UIも可能
- **エラーページ**:
  - 404（Not Found）, 500（Server Error）の簡素なページを用意
  - 必要に応じて「ログインしていない/権限不足」用ページも
- **将来拡張**:
  - タグ管理や詳細なユーザー管理、システム設定画面などを追加しやすいよう、**ダッシュボードを中央ハブ**にする
  - モバイル対応（レスポンシブ）を最小限入れておくと運用がスムーズ
- **UIテンプレート**:
  - Tailwind CSS のシンプルなコンポーネントを活用し、画面間の遷移を統一されたデザインでまとめる
- **お金をかけずに実装**:
  - **Mermaid** などで遷移図を管理し、無料で編集可能
  - **Next.js** の `app` ディレクトリ / `pages` ディレクトリ構成をシンプルに保ち、画面数が増えすぎないように注意

---

### まとめ

- **初期リリース**ではログイン画面(任意)＋ダッシュボード＋管理系画面＋コンテンツ系画面の **最小構成** からスタート。
- 将来はタグ管理やユーザー管理、システム設定など **追加画面** をダッシュボード配下で拡張。
- 画面遷移を極力シンプルにし、**経験の浅いエンジニアでも画面数や設計に混乱しない**よう配慮する。
- エラーハンドリングやモバイル対応は **最低限レベル** にとどめ、 **段階的に品質を高める** 方針。

この画面一覧・遷移図に沿って、**必要なUI/UXを最小限で**短期間に実装し、運用開始後の改善サイクルで徐々に機能拡充していくのが理想です。

# 機能詳細仕様

> **注意:** このドキュメントでは、各画面の詳細な機能仕様を定義します。共通要件（レスポンシブデザイン、エラーハンドリング、アクセシビリティなど）については [0_Common_Requirements.md](../../3_Frontend_Functional_Requirements/0_Common_Requirements.md) を参照してください。

## 1. ログイン画面 (Login)

### 概要

管理者ユーザーがシステムにログインするための画面です。認証情報を入力し、認証に成功するとダッシュボード画面に遷移します。

---

### 機能

1. **ユーザー認証フォーム**
   - メールアドレス入力欄
   - パスワード入力欄
   - ログインボタン
2. **認証状態の保持**
   - 「ログイン状態を保持する」チェックボックス
3. **エラー表示**
   - 認証失敗時のエラーメッセージ
4. **パスワードリセット**
   - パスワードを忘れた場合のリンク（将来拡張）

---

### バリデーション

- メールアドレス: 必須, メール形式
- パスワード: 必須, 最小文字数

---

### エラーメッセージ

- 「メールアドレスを入力してください。」
- 「パスワードを入力してください。」
- 「メールアドレスまたはパスワードが正しくありません。」
- 「ログインに失敗しました。ネットワークを確認してください。」

---

### UI/UX考慮事項

- シンプルで分かりやすいフォームレイアウト
- パスワード表示/非表示の切り替え機能
- ログイン中の状態表示（ローディングインジケーター）
- 自動フォーカス（メールアドレス欄）

---

## 2. ダッシュボード画面 (Dashboard)

### 概要

システムの主要な情報や各機能へのアクセスを提供する中央ハブ画面です。新着コンテンツ数、要約状況、通知履歴などの概要情報を表示します。

---

### 機能

1. **ステータスカード**
   - 新着コンテンツ数
   - 未要約コンテンツ数
   - 通知済みコンテンツ数
   - エラー発生数
2. **最近の活動**
   - 最近追加されたコンテンツ（最大5件）
   - 最近送信された通知（最大5件）
3. **クイックアクセス**
   - 各管理画面へのカードリンク
     - ソース管理
     - AIモデル設定
     - 通知設定
     - コンテンツ一覧
4. **システム状態**（将来拡張）
   - API使用状況
   - ストレージ使用状況

---

### データ表示

- 数値: カウント表示（例: 「12件の新着コンテンツ」）
- リスト: タイトル、日時、ステータスアイコン
- カード: アイコン、タイトル、簡単な説明

---

### インタラクション

- カードホバー効果
- クリック可能な領域の明示
- 最新データの自動更新（オプション）

---

### UI/UX考慮事項

- 情報の優先順位付け（重要な情報を上部に配置）
- データ可視化（グラフやチャートの活用）
- スケルトンローダーによるロード状態の表示
- エラー状態の適切な表示

---

## 3. ソース管理画面 (Source Management)

### 概要

監視対象のYouTubeチャンネル、ブログRSS、arXivなどの情報ソースを管理する画面です。ソースの追加、編集、削除、有効/無効の切り替えを行います。

---

### 機能

1. **ソース一覧表示**
   - ソース名
   - ソースタイプ（YouTube/RSS/arXiv）
   - ステータス（有効/無効）
   - 最終更新日時
   - アクション（編集/削除）
2. **ソース追加**
   - 新規ソース追加ボタン
   - ソースタイプ選択
   - タイプ別入力フォーム
3. **ソース編集**
   - 既存ソース情報の編集
   - ステータス切り替え
4. **ソース削除**
   - 削除確認ダイアログ
5. **検索/フィルタリング**
   - ソース名検索
   - タイプ別フィルタリング
   - ステータス別フィルタリング

---

### ソースタイプ別フィールド

#### YouTube
- チャンネルID/URL（必須）
- チャンネル名（自動取得/手動入力）
- 説明（オプション）

#### RSS
- フィードURL（必須）
- サイト名（自動取得/手動入力）
- 説明（オプション）

#### arXiv
- カテゴリ（必須、複数選択可）
- キーワード（オプション）
- 著者（オプション）

---

### バリデーション

- ソース名: 必須, 最大100文字
- YouTube URL: 有効なYouTubeチャンネルURL形式
- RSS URL: 有効なURL形式, アクセス可能なRSSフィード
- arXivカテゴリ: 少なくとも1つ選択

---

### エラーメッセージ

- 「ソース名を入力してください。」
- 「有効なYouTubeチャンネルURLを入力してください。」
- 「有効なRSSフィードURLを入力してください。」
- 「少なくとも1つのarXivカテゴリを選択してください。」
- 「このソースは既に登録されています。」

---

### UI/UX考慮事項

- タイプ選択に応じたフォーム表示の動的変更
- URLの自動検証と情報取得
- ドラッグ&ドロップでの並べ替え（将来拡張）
- 一括操作（将来拡張）

---

## 4. AIモデル設定画面 (AI Model Settings)

### 概要

要約に使用するAIモデル（OpenAI, Claude, Gemini等）の設定を管理する画面です。API Keyの設定、デフォルトモデルの選択、モデル固有のパラメータ設定などを行います。

---

### 機能

1. **AIモデル一覧**
   - モデル名
   - プロバイダー（OpenAI, Anthropic, Google等）
   - ステータス（有効/無効）
   - デフォルト設定
2. **API Key設定**
   - プロバイダーごとのAPI Key入力
   - キーの検証機能
3. **モデル設定**
   - デフォルトモデルの選択
   - モデル固有パラメータの設定（将来拡張）
4. **テスト機能**（将来拡張）
   - テスト呼び出し
   - レスポンス確認

---

### バリデーション

- モデル名: 必須, 例: "GPT-3.5", "Claude-v1"
- API Key:
  - 必須, 文字列長チェック
  - 再表示しないなどセキュリティ対応
- トークン数などのパラメータ (将来拡張)

---

### エラーメッセージ

- 「API Keyを入力してください。」
- 「API Keyの形式が不正です。」
- 「保存に失敗しました。ネットワークを確認してください。」

---

### UI/UX考慮事項

- API Key はセキュリティ上、再表示なし or 先頭数文字のみ
- "テスト呼び出し" ボタン（将来拡張）でモデル動作確認
- デフォルトモデルを**一目で判別**できるようマーク

---

## 5. 通知設定画面 (Notification Settings)

### 概要

Discordへの通知方法を管理する画面です。Webhook URLを登録し、Embed形式のテンプレートを編集できます。
必要に応じてテスト送信を行い、設定の正しさを確認します。

---

### 機能

1. **Discord Webhook URL** 設定
2. **Embedテンプレート** の編集（タイトル、説明文、サムネURLなど）
3. **テスト送信** ボタン
4. **通知条件** 設定（将来拡張）
   - 全コンテンツ通知
   - 特定タグのみ通知
   - 特定ソースのみ通知

---

### テンプレート編集

- タイトル形式: 変数置換対応（例: `{title} - 要約`)
- 説明文形式: 変数置換対応（例: `{summary}`)
- カラー設定: カラーピッカー
- サムネイル: URL or 元コンテンツのサムネ使用選択

---

### バリデーション

- Webhook URL: 必須, Discord Webhook URL形式
- テンプレートタイトル: 必須, 最大256文字
- テンプレート説明: 必須, 最大4000文字

---

### エラーメッセージ

- 「Webhook URLを入力してください。」
- 「有効なDiscord Webhook URLを入力してください。」
- 「テンプレートタイトルを入力してください。」
- 「テスト送信に失敗しました。URLを確認してください。」

---

### UI/UX考慮事項

- テンプレートのプレビュー表示
- 変数リストのヘルプ表示
- テスト送信結果のフィードバック
- 複数チャンネル設定（将来拡張）

---

## 6. コンテンツ一覧画面 (Content List)

### 概要

収集されたコンテンツの一覧を表示し、検索、フィルタリング、ソートなどの機能を提供します。
各コンテンツの基本情報（タイトル、ソース、日時など）と要約ステータスを確認できます。

---

### 機能

1. **コンテンツ一覧表示**
   - タイトル
   - サムネイル（可能な場合）
   - ソース名
   - 公開日時
   - 要約ステータス（未要約/要約済み/エラー）
   - 通知ステータス（未通知/通知済み）
2. **検索/フィルタリング**
   - キーワード検索
   - ソース別フィルタ
   - 日付範囲フィルタ
   - ステータス別フィルタ
   - タグ別フィルタ（将来拡張）
3. **ソート機能**
   - 日付（新しい順/古い順）
   - タイトル（昇順/降順）
   - ソース名（昇順/降順）
4. **一括操作**（将来拡張）
   - 選択したコンテンツの一括要約
   - 選択したコンテンツの一括通知
   - 選択したコンテンツの一括削除

---

### 表示形式

- リスト表示: コンパクトな情報表示
- グリッド表示: サムネイル重視の表示
- ページネーション: 1ページあたり10/20/50件

---

### インタラクション

- クリックでコンテンツ詳細画面へ遷移
- フィルター適用時のURL更新（ブックマーク可能）
- 無限スクロール or ページネーション

---

### UI/UX考慮事項

- スケルトンローダーによるロード状態の表示
- フィルター条件の視覚的表示と簡単な解除
- 検索結果なしの適切な表示
- モバイル表示の最適化

---

## 7. コンテンツ詳細画面 (Content Detail)

### 概要

個別のコンテンツの詳細情報と要約結果を表示します。元コンテンツへのリンク、複数AIモデルによる要約結果の比較、通知履歴などを確認できます。

---

### 機能

1. **コンテンツ基本情報**
   - タイトル
   - サムネイル
   - ソース名
   - 公開日時
   - 元URL（クリック可能）
2. **要約結果表示**
   - AIモデル別タブ切り替え
   - 要約テキスト
   - 要約生成日時
   - 再要約ボタン
3. **通知履歴**
   - 通知日時
   - 通知先
   - 通知ステータス
   - 再通知ボタン
4. **タグ管理**
   - 現在のタグ表示
   - タグ追加/削除
5. **アクション**
   - 元コンテンツを開く
   - 編集（タイトルや説明の手動修正）
   - 削除

---

### 表示形式

- 要約結果: マークダウン形式対応
- コードブロック: シンタックスハイライト（技術コンテンツの場合）
- 画像: レスポンシブ表示

---

### インタラクション

- モデル切り替えタブ
- 通知履歴の展開/折りたたみ
- タグのクリックでフィルタリング
- 編集モードの切り替え

---

### UI/UX考慮事項

- 要約テキストの読みやすさ（適切なフォントサイズと行間）
- 元コンテンツとの明確な区別
- 複数モデル比較の視覚的表現
- 編集操作の直感的なUI


# フロントエンド技術スタック

> **注意:** このドキュメントでは、フロントエンド固有の技術スタックと実装方針を定義します。共通技術スタックについては [../../0_common/1_Common_Technology_Stack.md](../../0_common/1_Common_Technology_Stack.md) を参照してください。共通要件（レスポンシブデザイン、エラーハンドリング、アクセシビリティなど）については [0_Common_Requirements.md](0_Common_Requirements.md) を参照してください。ディレクトリ構造については [../../0_common/3_Directory_Structure.md](../../0_common/3_Directory_Structure.md) を参照してください。コーディング規約については [../../0_common/4_Coding_Conventions.md](../../0_common/4_Coding_Conventions.md) を参照してください。

## 1. フロントエンド固有の技術選定

### フレームワーク

1. **Next.js**
   - React ベースのフルスタックフレームワーク
   - App Router を採用（実装済み: Next.js 15.2.2）
   - Vercel でのホスティングが容易（無料枠あり）
   - TypeScript 完全サポート（実装済み）

2. **Tailwind CSS**
   - ユーティリティファーストの CSS フレームワーク
   - カスタマイズが容易（実装済み: Tailwind CSS 4.x）
   - 学習コストが低い
   - ダークモード対応が簡単（next-themes で実装準備済み）

3. **UI コンポーネント**
   - shadcn/ui（実装済み）
     - コピー＆ペーストで使えるコンポーネント集
     - Tailwind CSS ベース
     - 商用利用無料
     - 導入済みコンポーネント: Button, Card, Dialog, Form, Input, Label, Select, Sonner, Table
   - 補助ライブラリ（実装済み）
     - **UIプリミティブ**
       - @radix-ui/react-*: アクセシビリティ重視の低レベルUIコンポーネント（ダイアログ、セレクト、ラベルなど）
       - @headlessui/react: アクセシビリティに配慮したヘッドレスUIコンポーネント（ドロップダウン、モーダルなど）
     - **アイコン**
       - lucide-react: 美しいオープンソースアイコンライブラリ
       - @heroicons/react: Tailwind Labsが提供する高品質アイコンセット
     - **スタイリングユーティリティ**
       - class-variance-authority: コンポーネントバリエーション管理（条件付きクラス定義）
       - clsx: クラス名結合ユーティリティ（条件付きクラス名の生成）
       - tailwind-merge: Tailwindクラスの競合を解決し最適化
       - tailwindcss-animate: Tailwind CSSでのアニメーション定義

---

### 状態管理

1. **React Context + useReducer**
   - 小〜中規模アプリに最適
   - 追加ライブラリ不要
   - 学習コストが低い
   - 今後実装予定

2. **Zustand**（実装済み）
   - シンプルで軽量な状態管理ライブラリ
   - Redux より学習コストが低い
   - TypeScript との相性が良い
   - イミュータブルな状態更新と型安全性

3. **React Query / SWR**（実装済み: @tanstack/react-query）
   - データフェッチングと状態管理
   - キャッシュ機能
   - 再取得、エラーハンドリングが簡単
   - 今後のデータフェッチングロジックで活用予定

---

### API 通信

1. **fetch API / axios**（実装済み: axios）
   - 標準的な HTTP クライアント
   - 簡単に使える
   - インターセプターでエラーハンドリング
   - リクエスト/レスポンス変換機能

2. **Next.js API Routes**
   - バックエンドとの連携が容易
   - サーバーサイドの処理を同じリポジトリで管理
   - 今後実装予定

---

### フォーム管理

1. **React Hook Form**（実装済み）
   - パフォーマンスが良い
   - バリデーション機能
   - エラーハンドリングが簡単
   - Form コンポーネントと連携済み

2. **Zod**（実装済み）
   - TypeScript ファーストのバリデーションライブラリ
   - React Hook Form と組み合わせて使用（@hookform/resolvers で連携）
   - 型安全なバリデーション

---

### 認証

1. **NextAuth.js**（実装済み: next-auth）
   - 簡単に実装できる認証ライブラリ
   - 複数の認証プロバイダーをサポート
   - JWT / セッションベースの認証
   - 今後の認証機能で活用予定

### 国際化

1. **Next Intl**（実装済み: next-intl）
   - Next.js向け多言語対応ライブラリ
   - メッセージのフォーマット
   - 日付、数値、複数形のローカライズ
   - 今後の多言語対応で活用予定

### テーマ

1. **Next Themes**（実装済み: next-themes）
   - ダークモード/ライトモード切り替え機能
   - システム設定との連携
   - テーマの永続化
   - 今後のテーマ切り替え機能で活用予定

---

## 2. 開発環境

### 概要

開発効率を高めるツールを導入しつつ、初心者でも扱いやすい環境を構築します。

---

### コードエディタ

1. **Visual Studio Code**
   - 無料で高機能
   - 豊富な拡張機能
   - Git 連携が簡単
   - プロジェクト開発で使用中

2. **拡張機能**
   - ESLint: コード品質チェック（設定済み）
   - Prettier: コードフォーマット（設定済み）
   - Tailwind CSS IntelliSense: クラス補完
   - TypeScript 関連: 型チェックと補完

---

### 開発ツール

1. **ESLint**（実装済み: eslint.config.mjs）
   - コード品質の維持
   - エラーの早期発見
   - Next.js推奨設定を採用

2. **Prettier**
   - コードフォーマット
   - チーム内での一貫性確保
   - ESLintと連携

3. **TypeScript**（実装済み: tsconfig.json）
   - 型安全性
   - 自己文書化
   - エディタのサポートが充実
   - パスエイリアス設定済み（@/components など）

4. **Git / GitHub**
   - バージョン管理
   - コラボレーション
   - CI/CD 連携
   - プロジェクトで使用中

5. **Turbopack**（実装済み）
   - 高速な開発サーバー
   - 迅速なHMR（Hot Module Replacement）
   - 開発体験の向上

---

## 3. デプロイ

### 概要

無料または低コストで、デプロイが簡単なサービスを選定します。

---

### ホスティングサービス

1. **Vercel**
   - Next.js との相性が最高
   - GitHub 連携で自動デプロイ
   - 無料枠が十分
   - プレビュー環境の自動生成

2. **Netlify**（代替）
   - 同様に使いやすい
   - フォーム機能などの追加機能

3. **GitHub Pages**（最小構成の場合）
   - 完全無料
   - 静的サイト向け

---

### まとめ

以上のフロントエンド技術スタック設計により、**Next.js + Tailwind** を中心に、**無料かつ初心者に優しい**構成で短期間開発が可能になります。
**Vercel** でデプロイすれば、**GitHub 連携→プッシュ→自動ビルド** という手軽なワークフローを実現でき、追加コストや手間を最小限に抑えられます。


# フロントエンドテスト仕様

## 概要

このドキュメントでは、DigeClipプロジェクトのフロントエンド部分に特化したテスト仕様を定義します。共通のテスト戦略については[共通テスト戦略](../../0_common/5_Testing_Strategy.md)を参照してください。

## 1. フロントエンド特有のテスト目標

- ユーザーインターフェースの一貫性と使いやすさの確保
- レスポンシブデザインの検証
- クロスブラウザ互換性の確保
- アクセシビリティ要件の遵守
- パフォーマンス最適化の検証

## 2. コンポーネントテスト

### 2.1 UIコンポーネントテスト

- **対象**: 個別のUIコンポーネント（ボタン、フォーム、カード等）
- **ツール**: React Testing Library
- **検証項目**:
  - レンダリングの正確性
  - プロップスの適切な処理
  - イベントハンドラの動作
  - 状態変化の正確性
  - アクセシビリティ（WAI-ARIA準拠）

### 2.2 テスト例

```tsx
// Button.test.tsx
import { render, screen, fireEvent } from '@testing-library/react';
import Button from './Button';

describe('Button component', () => {
  it('should render with correct text', () => {
    render(<Button>Click me</Button>);
    expect(screen.getByText('Click me')).toBeInTheDocument();
  });

  it('should call onClick handler when clicked', () => {
    const handleClick = jest.fn();
    render(<Button onClick={handleClick}>Click me</Button>);
    fireEvent.click(screen.getByText('Click me'));
    expect(handleClick).toHaveBeenCalledTimes(1);
  });
});
```

## 3. ページテスト

### 3.1 ページコンポーネントテスト

- **対象**: 完全なページコンポーネント
- **ツール**: React Testing Library, MSW（APIモック）
- **検証項目**:
  - ページの初期レンダリング
  - データフェッチングと表示
  - ユーザーインタラクション
  - ルーティング
  - エラー状態の処理

### 3.2 テスト例

```tsx
// HomePage.test.tsx
import { render, screen, waitFor } from '@testing-library/react';
import { rest } from 'msw';
import { setupServer } from 'msw/node';
import HomePage from './HomePage';

const server = setupServer(
  rest.get('/api/articles', (req, res, ctx) => {
    return res(ctx.json([
      { id: 1, title: 'Article 1' },
      { id: 2, title: 'Article 2' }
    ]));
  })
);

beforeAll(() => server.listen());
afterEach(() => server.resetHandlers());
afterAll(() => server.close());

test('renders articles from API', async () => {
  render(<HomePage />);

  // ローディング状態の確認
  expect(screen.getByText('Loading...')).toBeInTheDocument();

  // データ読み込み後の表示確認
  await waitFor(() => {
    expect(screen.getByText('Article 1')).toBeInTheDocument();
    expect(screen.getByText('Article 2')).toBeInTheDocument();
  });
});
```

## 4. 状態管理テスト

### 4.1 Recoil/Zustand状態テスト

- **対象**: 状態管理ロジック
- **ツール**: Jest、React Testing Library
- **検証項目**:
  - 状態の初期化
  - 状態の更新
  - セレクタの動作
  - 非同期アクション

### 4.2 テスト例

```tsx
// articleState.test.ts
import { renderHook, act } from '@testing-library/react-hooks';
import { useArticleStore } from './articleStore';

describe('Article Store', () => {
  it('should initialize with empty articles', () => {
    const { result } = renderHook(() => useArticleStore());
    expect(result.current.articles).toEqual([]);
  });

  it('should add articles', () => {
    const { result } = renderHook(() => useArticleStore());

    act(() => {
      result.current.addArticle({ id: 1, title: 'New Article' });
    });

    expect(result.current.articles).toEqual([
      { id: 1, title: 'New Article' }
    ]);
  });
});
```

## 5. カスタムフックテスト

### 5.1 カスタムフックテスト戦略

- **対象**: アプリケーション固有のReactフック
- **ツール**: `@testing-library/react-hooks`
- **検証項目**:
  - フックの戻り値
  - 状態更新
  - 副作用の実行
  - エラー処理

### 5.2 テスト例

```tsx
// useArticle.test.ts
import { renderHook, act } from '@testing-library/react-hooks';
import { rest } from 'msw';
import { setupServer } from 'msw/node';
import { useArticle } from './useArticle';

const server = setupServer(
  rest.get('/api/articles/1', (req, res, ctx) => {
    return res(ctx.json({ id: 1, title: 'Article 1' }));
  })
);

beforeAll(() => server.listen());
afterEach(() => server.resetHandlers());
afterAll(() => server.close());

test('fetches and returns article data', async () => {
  const { result, waitForNextUpdate } = renderHook(() => useArticle(1));

  expect(result.current.loading).toBe(true);
  expect(result.current.article).toBeNull();

  await waitForNextUpdate();

  expect(result.current.loading).toBe(false);
  expect(result.current.article).toEqual({ id: 1, title: 'Article 1' });
});
```

## 6. E2Eテスト（フロントエンド視点）

### 6.1 E2Eテスト戦略

- **対象**: 重要なユーザーフロー
- **ツール**: Cypress
- **検証項目**:
  - ユーザー登録・ログイン
  - コンテンツ閲覧・操作
  - フォーム送信
  - ナビゲーション
  - エラー処理

### 6.2 テスト例

```js
// cypress/integration/login.spec.js
describe('Login Flow', () => {
  beforeEach(() => {
    cy.visit('/login');
  });

  it('should login successfully with valid credentials', () => {
    cy.get('input[name="email"]').type('user@example.com');
    cy.get('input[name="password"]').type('password123');
    cy.get('button[type="submit"]').click();

    // ログイン後のリダイレクト確認
    cy.url().should('include', '/dashboard');
    cy.get('h1').should('contain', 'Dashboard');
  });

  it('should show error with invalid credentials', () => {
    cy.get('input[name="email"]').type('user@example.com');
    cy.get('input[name="password"]').type('wrongpassword');
    cy.get('button[type="submit"]').click();

    cy.get('.error-message').should('be.visible');
    cy.get('.error-message').should('contain', 'Invalid credentials');
  });
});
```

## 7. ビジュアルリグレッションテスト

### 7.1 ビジュアルテスト戦略

- **対象**: UIコンポーネントとページ
- **ツール**: Storybook + Chromatic または Cypress + Percy
- **検証項目**:
  - コンポーネントの視覚的一貫性
  - レスポンシブデザイン
  - テーマ切り替え
  - アニメーション

### 7.2 実装アプローチ

- Storybookでコンポーネントカタログを作成
- Chromaticでビジュアルテストを自動化
- CIパイプラインに統合

## 8. パフォーマンステスト

### 8.1 パフォーマンス指標

- **First Contentful Paint (FCP)**: 2秒以内
- **Largest Contentful Paint (LCP)**: 2.5秒以内
- **Time to Interactive (TTI)**: 3.5秒以内
- **Total Blocking Time (TBT)**: 300ms以内
- **Cumulative Layout Shift (CLS)**: 0.1以下

### 8.2 テストツール

- Lighthouse CI
- Web Vitals
- Next.js Analytics

### 8.3 実装アプローチ

- CIパイプラインでLighthouseレポート生成
- 本番環境でのWeb Vitalsモニタリング
- パフォーマンスバジェットの設定と監視

## 9. アクセシビリティテスト

### 9.1 アクセシビリティ要件

- WCAG 2.1 AA準拠
- スクリーンリーダー対応
- キーボードナビゲーション
- 色コントラスト

### 9.2 テストツール

- jest-axe
- Cypress-axe
- Lighthouse Accessibility Audit

### 9.3 テスト例

```tsx
// Button.test.tsx (アクセシビリティテスト追加)
import { render } from '@testing-library/react';
import { axe, toHaveNoViolations } from 'jest-axe';
import Button from './Button';

expect.extend(toHaveNoViolations);

describe('Button accessibility', () => {
  it('should not have accessibility violations', async () => {
    const { container } = render(<Button>Click me</Button>);
    const results = await axe(container);
    expect(results).toHaveNoViolations();
  });
});
```

## 10. フロントエンド特有のテスト環境設定

### 10.1 Jest設定

```js
// jest.config.js
module.exports = {
  testEnvironment: 'jsdom',
  setupFilesAfterEnv: ['<rootDir>/jest.setup.js'],
  testPathIgnorePatterns: ['<rootDir>/node_modules/', '<rootDir>/.next/'],
  transform: {
    '^.+\\.(js|jsx|ts|tsx)$': ['babel-jest', { presets: ['next/babel'] }],
  },
  moduleNameMapper: {
    '^@/components/(.*)$': '<rootDir>/components/$1',
    '^@/pages/(.*)$': '<rootDir>/pages/$1',
    '^@/hooks/(.*)$': '<rootDir>/hooks/$1',
    '\\.(css|less|scss|sass)$': 'identity-obj-proxy',
  },
  collectCoverageFrom: [
    'components/**/*.{js,jsx,ts,tsx}',
    'pages/**/*.{js,jsx,ts,tsx}',
    'hooks/**/*.{js,jsx,ts,tsx}',
    '!**/*.d.ts',
    '!**/node_modules/**',
  ],
};
```

### 10.2 Cypress設定

```js
// cypress.json
{
  "baseUrl": "http://localhost:3000",
  "viewportWidth": 1280,
  "viewportHeight": 720,
  "video": false,
  "screenshotOnRunFailure": true,
  "integrationFolder": "cypress/integration",
  "testFiles": "**/*.spec.js",
  "env": {
    "apiUrl": "http://localhost:3000/api"
  }
}
```

## 11. CI/CDパイプラインでのフロントエンドテスト

### 11.1 GitHub Actions設定例

```yaml
# .github/workflows/frontend-tests.yml
name: Frontend Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'components/**'
      - 'pages/**'
      - 'hooks/**'
      - 'styles/**'
      - 'public/**'
      - 'package.json'
      - 'jest.config.js'
      - 'cypress/**'

jobs:
  unit-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '16'
      - name: Install dependencies
        run: npm ci
      - name: Run unit tests
        run: npm test
      - name: Upload coverage
        uses: codecov/codecov-action@v2

  e2e-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '16'
      - name: Install dependencies
        run: npm ci
      - name: Build
        run: npm run build
      - name: Cypress run
        uses: cypress-io/github-action@v2
        with:
          start: npm start
          wait-on: 'http://localhost:3000'
```

## 12. フロントエンドテストの優先順位

1. **最優先**: 重要なユーザーフロー（ログイン、記事閲覧、ダイジェスト作成など）
2. **高優先度**: 共有コンポーネント、状態管理ロジック
3. **中優先度**: 個別ページコンポーネント、カスタムフック
4. **低優先度**: 視覚的な細部、エッジケース

## 13. フロントエンド特有のテストデータ

### 13.1 モックデータ

- ユーザープロファイル
- 記事データ
- コメントデータ
- 通知データ

### 13.2 データ管理

- `__mocks__` ディレクトリにモックデータを集約
- ファクトリー関数でテストデータを生成
- MSWでAPIレスポンスをモック

## 14. フロントエンドテストのトラブルシューティング

### 14.1 よくある問題と解決策

- **テストが不安定**: タイミング問題を `waitFor` や `findBy*` クエリで解決
- **スタイル関連のエラー**: CSSモジュールのモック設定を確認
- **非同期テストの失敗**: 適切な待機メカニズムの使用を確認
- **コンポーネントが見つからない**: クエリ選択方法を見直し（テキスト、ロール、テストID）

### 14.2 デバッグ方法

- `screen.debug()` を使用してDOMをコンソールに出力
- Cypressの `cy.pause()` を使用して実行を一時停止
- テスト失敗時のスクリーンショットを確認

