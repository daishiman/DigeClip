echo "🔍 コミット前の基本チェック実行中..."

# プロジェクトのルートディレクトリに移動
cd "$(git rev-parse --show-toplevel)"

# 変更されたファイルを取得
all_changed_files=$(git diff --cached --name-only --diff-filter=ACM)
js_ts_files=$(echo "$all_changed_files" | grep -E '\.tsx?$|\.jsx?$')
rules_files=$(echo "$all_changed_files" | grep -E '^rules/.+\.md$')

cd digeclip

# lint-stagedで変更ファイルのみチェック
echo "🧹 ESLint/Prettier実行中..."
npx lint-staged
lint_result=$?

# 変更ファイルに関連する単体テスト実行
if [ ! -z "$js_ts_files" ]; then
  echo "🧪 変更ファイルの単体テスト実行中..."
  npm test -- --findRelatedTests $js_ts_files --passWithNoTests
  test_result=$?
else
  echo "📝 テスト対象ファイルなし。テストスキップ"
  test_result=0
fi

# セキュリティチェック（重大な問題のみ）
echo "🔒 重大なセキュリティ問題をチェック中..."
npm audit --production --audit-level=critical
security_result=$?

# rulesディレクトリの変更ファイルをチェック
rules_check_result=0
if [ ! -z "$rules_files" ]; then
  echo "📋 ドキュメントファイルの検証中..."

  cd "$(git rev-parse --show-toplevel)"

  for file in $rules_files; do
    echo "  - $file を検証中..."

    # ファイルが空でないことを確認
    if [ ! -s "$file" ]; then
      echo "    ❌ $file が空です"
      rules_check_result=1
      continue
    fi

    # Markdownの基本的な構文チェック（ヘッダーの存在確認）
    if ! grep -q "^# " "$file"; then
      echo "    ⚠️ $file に適切な見出し(#)がありません"
      rules_check_result=1
    fi

    # 内部リンクの有効性チェック
    broken_links=$(grep -o "\[.*\](.*\.md)" "$file" | grep -v "http" | sed 's/.*(\(.*\))/\1/' | while read link; do
      linked_file=$(echo "$link" | sed 's/#.*//')
      if [ ! -z "$linked_file" ] && [ ! -f "$(dirname "$file")/$linked_file" ]; then
        echo "$linked_file"
      fi
    done)

    if [ ! -z "$broken_links" ]; then
      echo "    ⚠️ $file に無効なリンクがあります: $broken_links"
      rules_check_result=1
    fi

    # 必須セクションの確認（ファイルパスに基づいて）
    if [[ "$file" == *"_requirements"* ]]; then
      if ! grep -q "^## " "$file"; then
        echo "    ⚠️ $file に要件定義のセクション(##)がありません"
        rules_check_result=1
      fi
    fi

    # スペルチェック（基本的な英語スペルミス）- オプション
    if command -v aspell &> /dev/null; then
      spell_errors=$(cat "$file" | aspell list --lang=en | sort -u | head -5)
      if [ ! -z "$spell_errors" ]; then
        echo "    ℹ️ $file にスペルミスの可能性: ${spell_errors[*]}"
      fi
    fi
  done

  cd digeclip
else
  echo "📝 rules変更なし。ドキュメントチェックをスキップ"
fi

# 実行終了時間と結果表示
if [ $lint_result -ne 0 ] || [ $test_result -ne 0 ] || [ $security_result -ne 0 ] || [ $rules_check_result -ne 0 ]; then
  echo "❌ チェック失敗:"
  [ $lint_result -ne 0 ] && echo "  - Lintエラー"
  [ $test_result -ne 0 ] && echo "  - テスト失敗"
  [ $security_result -ne 0 ] && echo "  - 重大なセキュリティ問題"
  [ $rules_check_result -ne 0 ] && echo "  - ドキュメント検証エラー"
  exit 1
else
  echo "✅ チェック成功"
  exit 0
fi
